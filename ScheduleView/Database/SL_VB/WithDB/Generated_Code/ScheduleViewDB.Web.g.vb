'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18052
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Compare Binary
Option Infer On
Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.ComponentModel.DataAnnotations
Imports System.ComponentModel.DataAnnotations.Schema
Imports System.Linq
Imports System.Runtime.Serialization
Imports System.ServiceModel
Imports System.ServiceModel.DomainServices
Imports System.ServiceModel.DomainServices.Client
Imports System.ServiceModel.DomainServices.Client.ApplicationServices
Imports System.ServiceModel.Web
Imports System.Xml.Serialization


''' <summary>
''' Context for the RIA application.
''' </summary>
''' <remarks>
''' This context extends the base to make application services and types available
''' for consumption from code and xaml.
''' </remarks>
Partial Public NotInheritable Class WebContext
    Inherits WebContextBase
    
    #Region "Extensibility Method Definitions"

    ''' <summary>
    ''' This method is invoked from the constructor once initialization is complete and
    ''' can be used for further object setup.
    ''' </summary>
    Private Partial Sub OnCreated()
    End Sub

    #End Region
    
    
    ''' <summary>
    ''' Initializes a new instance of the WebContext class.
    ''' </summary>
    Public Sub New()
        MyBase.New
        Me.OnCreated
    End Sub
    
    ''' <summary>
    ''' Gets the context that is registered as a lifetime object with the current application.
    ''' </summary>
    ''' <exception cref="InvalidOperationException"> is thrown if there is no current application,
    ''' no contexts have been added, or more than one context has been added.
    ''' </exception>
    ''' <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
    Public Shadows Shared ReadOnly Property Current() As WebContext
        Get
            Return CType(WebContextBase.Current,WebContext)
        End Get
    End Property
End Class

Namespace Web
    
    ''' <summary>
    ''' The 'Category' entity class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/ScheduleViewDB.Web")>  _
    Partial Public NotInheritable Class Category
        Inherits Entity
        
        Private _categoryBrushName As String
        
        Private _categoryID As Integer
        
        Private _categoryName As String
        
        Private _displayName As String
        
        Private _sqlAppointments As EntityCollection(Of SqlAppointment)
        
        Private _sqlExceptionAppointments As EntityCollection(Of SqlExceptionAppointment)
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub
        Private Partial Sub OnCategoryBrushNameChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnCategoryBrushNameChanged()
        End Sub
        Private Partial Sub OnCategoryIDChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnCategoryIDChanged()
        End Sub
        Private Partial Sub OnCategoryNameChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnCategoryNameChanged()
        End Sub
        Private Partial Sub OnDisplayNameChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnDisplayNameChanged()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="Category"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Gets or sets the 'CategoryBrushName' value.
        ''' </summary>
        <DataMember(),  _
         StringLength(100)>  _
        Public Property CategoryBrushName() As String
            Get
                Return Me._categoryBrushName
            End Get
            Set
                If (String.Equals(Me._categoryBrushName, value) = false) Then
                    Me.OnCategoryBrushNameChanging(value)
                    Me.RaiseDataMemberChanging("CategoryBrushName")
                    Me.ValidateProperty("CategoryBrushName", value)
                    Me._categoryBrushName = value
                    Me.RaiseDataMemberChanged("CategoryBrushName")
                    Me.OnCategoryBrushNameChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'CategoryID' value.
        ''' </summary>
        <DatabaseGenerated(DatabaseGeneratedOption.Identity),  _
         DataMember(),  _
         Editable(false, AllowInitialValue:=true),  _
         Key(),  _
         RoundtripOriginal()>  _
        Public Property CategoryID() As Integer
            Get
                Return Me._categoryID
            End Get
            Set
                If ((Me._categoryID = value)  _
                            = false) Then
                    Me.OnCategoryIDChanging(value)
                    Me.ValidateProperty("CategoryID", value)
                    Me._categoryID = value
                    Me.RaisePropertyChanged("CategoryID")
                    Me.OnCategoryIDChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'CategoryName' value.
        ''' </summary>
        <DataMember(),  _
         StringLength(100)>  _
        Public Property CategoryName() As String
            Get
                Return Me._categoryName
            End Get
            Set
                If (String.Equals(Me._categoryName, value) = false) Then
                    Me.OnCategoryNameChanging(value)
                    Me.RaiseDataMemberChanging("CategoryName")
                    Me.ValidateProperty("CategoryName", value)
                    Me._categoryName = value
                    Me.RaiseDataMemberChanged("CategoryName")
                    Me.OnCategoryNameChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'DisplayName' value.
        ''' </summary>
        <DataMember(),  _
         StringLength(100)>  _
        Public Property DisplayName() As String
            Get
                Return Me._displayName
            End Get
            Set
                If (String.Equals(Me._displayName, value) = false) Then
                    Me.OnDisplayNameChanging(value)
                    Me.RaiseDataMemberChanging("DisplayName")
                    Me.ValidateProperty("DisplayName", value)
                    Me._displayName = value
                    Me.RaiseDataMemberChanged("DisplayName")
                    Me.OnDisplayNameChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets the collection of associated <see cref="SqlAppointment"/> entity instances.
        ''' </summary>
        <Association("Category_SqlAppointment", "CategoryID", "CategoryID"),  _
         XmlIgnore()>  _
        Public ReadOnly Property SqlAppointments() As EntityCollection(Of SqlAppointment)
            Get
                If (Me._sqlAppointments Is Nothing) Then
                    Me._sqlAppointments = New EntityCollection(Of SqlAppointment)(Me, "SqlAppointments", AddressOf Me.FilterSqlAppointments, AddressOf Me.AttachSqlAppointments, AddressOf Me.DetachSqlAppointments)
                End If
                Return Me._sqlAppointments
            End Get
        End Property
        
        ''' <summary>
        ''' Gets the collection of associated <see cref="SqlExceptionAppointment"/> entity instances.
        ''' </summary>
        <Association("Category_SqlExceptionAppointment", "CategoryID", "CategoryID"),  _
         XmlIgnore()>  _
        Public ReadOnly Property SqlExceptionAppointments() As EntityCollection(Of SqlExceptionAppointment)
            Get
                If (Me._sqlExceptionAppointments Is Nothing) Then
                    Me._sqlExceptionAppointments = New EntityCollection(Of SqlExceptionAppointment)(Me, "SqlExceptionAppointments", AddressOf Me.FilterSqlExceptionAppointments, AddressOf Me.AttachSqlExceptionAppointments, AddressOf Me.DetachSqlExceptionAppointments)
                End If
                Return Me._sqlExceptionAppointments
            End Get
        End Property
        
        Private Sub AttachSqlAppointments(ByVal entity As SqlAppointment)
            entity.Category = Me
        End Sub
        
        Private Sub DetachSqlAppointments(ByVal entity As SqlAppointment)
            entity.Category = Nothing
        End Sub
        
        Private Function FilterSqlAppointments(ByVal entity As SqlAppointment) As Boolean
            Return Object.Equals(entity.CategoryID, Me.CategoryID)
        End Function
        
        Private Sub AttachSqlExceptionAppointments(ByVal entity As SqlExceptionAppointment)
            entity.Category = Me
        End Sub
        
        Private Sub DetachSqlExceptionAppointments(ByVal entity As SqlExceptionAppointment)
            entity.Category = Nothing
        End Sub
        
        Private Function FilterSqlExceptionAppointments(ByVal entity As SqlExceptionAppointment) As Boolean
            Return Object.Equals(entity.CategoryID, Me.CategoryID)
        End Function
        
        ''' <summary>
        ''' Computes a value from the key fields that uniquely identifies this entity instance.
        ''' </summary>
        ''' <returns>An object instance that uniquely identifies this entity instance.</returns>
        Public Overrides Function GetIdentity() As Object
            Return Me._categoryID
        End Function
    End Class
    
    ''' <summary>
    ''' The 'SqlAppointment' entity class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/ScheduleViewDB.Web")>  _
    Partial Public NotInheritable Class SqlAppointment
        Inherits Entity
        
        Private _body As String
        
        Private _category As EntityRef(Of Category)
        
        Private _categoryID As Nullable(Of Integer)
        
        Private _end As DateTime
        
        Private _importance As Integer
        
        Private _isAllDayEvent As Boolean
        
        Private _recurrencePattern As String
        
        Private _sqlAppointmentId As Integer
        
        Private _sqlAppointmentResources As EntityCollection(Of SqlAppointmentResource)
        
        Private _sqlExceptionOccurrences As EntityCollection(Of SqlExceptionOccurrence)
        
        Private _start As DateTime
        
        Private _subject As String
        
        Private _timeMarker As EntityRef(Of TimeMarker)
        
        Private _timeMarkerID As Nullable(Of Integer)
        
        Private _timeZoneString As String
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub
        Private Partial Sub OnBodyChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnBodyChanged()
        End Sub
        Private Partial Sub OnCategoryIDChanging(ByVal value As Nullable(Of Integer))
        End Sub
        Private Partial Sub OnCategoryIDChanged()
        End Sub
        Private Partial Sub OnEndChanging(ByVal value As DateTime)
        End Sub
        Private Partial Sub OnEndChanged()
        End Sub
        Private Partial Sub OnImportanceChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnImportanceChanged()
        End Sub
        Private Partial Sub OnIsAllDayEventChanging(ByVal value As Boolean)
        End Sub
        Private Partial Sub OnIsAllDayEventChanged()
        End Sub
        Private Partial Sub OnRecurrencePatternChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnRecurrencePatternChanged()
        End Sub
        Private Partial Sub OnSqlAppointmentIdChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnSqlAppointmentIdChanged()
        End Sub
        Private Partial Sub OnStartChanging(ByVal value As DateTime)
        End Sub
        Private Partial Sub OnStartChanged()
        End Sub
        Private Partial Sub OnSubjectChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnSubjectChanged()
        End Sub
        Private Partial Sub OnTimeMarkerIDChanging(ByVal value As Nullable(Of Integer))
        End Sub
        Private Partial Sub OnTimeMarkerIDChanged()
        End Sub
        Private Partial Sub OnTimeZoneStringChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnTimeZoneStringChanged()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="SqlAppointment"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Gets or sets the 'Body' value.
        ''' </summary>
        <DataMember(),  _
         StringLength(500)>  _
        Public Property Body() As String
            Get
                Return Me._body
            End Get
            Set
                If (String.Equals(Me._body, value) = false) Then
                    Me.OnBodyChanging(value)
                    Me.RaiseDataMemberChanging("Body")
                    Me.ValidateProperty("Body", value)
                    Me._body = value
                    Me.RaiseDataMemberChanged("Body")
                    Me.OnBodyChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the associated <see cref="Category"/> entity.
        ''' </summary>
        <Association("Category_SqlAppointment", "CategoryID", "CategoryID", IsForeignKey:=true),  _
         XmlIgnore()>  _
        Public Property Category() As Category
            Get
                If (Me._category Is Nothing) Then
                    Me._category = New EntityRef(Of Category)(Me, "Category", AddressOf Me.FilterCategory)
                End If
                Return Me._category.Entity
            End Get
            Set
                Dim previous As Category = Me.Category
                If (Object.Equals(previous, value) = false) Then
                    Me.ValidateProperty("Category", value)
                    If (Not (previous) Is Nothing) Then
                        Me._category.Entity = Nothing
                        previous.SqlAppointments.Remove(Me)
                    End If
                    If (Not (value) Is Nothing) Then
                        Me.CategoryID = value.CategoryID
                    Else
                        Me.CategoryID = CType(Nothing, Nullable(Of Integer))
                    End If
                    Me._category.Entity = value
                    If (Not (value) Is Nothing) Then
                        value.SqlAppointments.Add(Me)
                    End If
                    Me.RaisePropertyChanged("Category")
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'CategoryID' value.
        ''' </summary>
        <DataMember(),  _
         RoundtripOriginal()>  _
        Public Property CategoryID() As Nullable(Of Integer)
            Get
                Return Me._categoryID
            End Get
            Set
                If (Me._categoryID.Equals(value) = false) Then
                    Me.OnCategoryIDChanging(value)
                    Me.RaiseDataMemberChanging("CategoryID")
                    Me.ValidateProperty("CategoryID", value)
                    Me._categoryID = value
                    Me.RaiseDataMemberChanged("CategoryID")
                    Me.OnCategoryIDChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'End' value.
        ''' </summary>
        <DataMember()>  _
        Public Property [End]() As DateTime
            Get
                Return Me._end
            End Get
            Set
                If ((Me._end = value)  _
                            = false) Then
                    Me.OnEndChanging(value)
                    Me.RaiseDataMemberChanging("End")
                    Me.ValidateProperty("End", value)
                    Me._end = value
                    Me.RaiseDataMemberChanged("End")
                    Me.OnEndChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'Importance' value.
        ''' </summary>
        <DataMember()>  _
        Public Property Importance() As Integer
            Get
                Return Me._importance
            End Get
            Set
                If ((Me._importance = value)  _
                            = false) Then
                    Me.OnImportanceChanging(value)
                    Me.RaiseDataMemberChanging("Importance")
                    Me.ValidateProperty("Importance", value)
                    Me._importance = value
                    Me.RaiseDataMemberChanged("Importance")
                    Me.OnImportanceChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'IsAllDayEvent' value.
        ''' </summary>
        <DataMember()>  _
        Public Property IsAllDayEvent() As Boolean
            Get
                Return Me._isAllDayEvent
            End Get
            Set
                If ((Me._isAllDayEvent = value)  _
                            = false) Then
                    Me.OnIsAllDayEventChanging(value)
                    Me.RaiseDataMemberChanging("IsAllDayEvent")
                    Me.ValidateProperty("IsAllDayEvent", value)
                    Me._isAllDayEvent = value
                    Me.RaiseDataMemberChanged("IsAllDayEvent")
                    Me.OnIsAllDayEventChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'RecurrencePattern' value.
        ''' </summary>
        <DataMember(),  _
         StringLength(100)>  _
        Public Property RecurrencePattern() As String
            Get
                Return Me._recurrencePattern
            End Get
            Set
                If (String.Equals(Me._recurrencePattern, value) = false) Then
                    Me.OnRecurrencePatternChanging(value)
                    Me.RaiseDataMemberChanging("RecurrencePattern")
                    Me.ValidateProperty("RecurrencePattern", value)
                    Me._recurrencePattern = value
                    Me.RaiseDataMemberChanged("RecurrencePattern")
                    Me.OnRecurrencePatternChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'SqlAppointmentId' value.
        ''' </summary>
        <DatabaseGenerated(DatabaseGeneratedOption.Identity),  _
         DataMember(),  _
         Editable(false, AllowInitialValue:=true),  _
         Key(),  _
         RoundtripOriginal()>  _
        Public Property SqlAppointmentId() As Integer
            Get
                Return Me._sqlAppointmentId
            End Get
            Set
                If ((Me._sqlAppointmentId = value)  _
                            = false) Then
                    Me.OnSqlAppointmentIdChanging(value)
                    Me.ValidateProperty("SqlAppointmentId", value)
                    Me._sqlAppointmentId = value
                    Me.RaisePropertyChanged("SqlAppointmentId")
                    Me.OnSqlAppointmentIdChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets the collection of associated <see cref="SqlAppointmentResource"/> entity instances.
        ''' </summary>
        <Association("SqlAppointment_SqlAppointmentResource", "SqlAppointmentId", "SqlAppointments_SqlAppointmentId"),  _
         XmlIgnore()>  _
        Public ReadOnly Property SqlAppointmentResources() As EntityCollection(Of SqlAppointmentResource)
            Get
                If (Me._sqlAppointmentResources Is Nothing) Then
                    Me._sqlAppointmentResources = New EntityCollection(Of SqlAppointmentResource)(Me, "SqlAppointmentResources", AddressOf Me.FilterSqlAppointmentResources, AddressOf Me.AttachSqlAppointmentResources, AddressOf Me.DetachSqlAppointmentResources)
                End If
                Return Me._sqlAppointmentResources
            End Get
        End Property
        
        ''' <summary>
        ''' Gets the collection of associated <see cref="SqlExceptionOccurrence"/> entity instances.
        ''' </summary>
        <Association("SqlAppointment_SqlExceptionOccurrence", "SqlAppointmentId", "MasterSqlAppointmentId"),  _
         XmlIgnore()>  _
        Public ReadOnly Property SqlExceptionOccurrences() As EntityCollection(Of SqlExceptionOccurrence)
            Get
                If (Me._sqlExceptionOccurrences Is Nothing) Then
                    Me._sqlExceptionOccurrences = New EntityCollection(Of SqlExceptionOccurrence)(Me, "SqlExceptionOccurrences", AddressOf Me.FilterSqlExceptionOccurrences, AddressOf Me.AttachSqlExceptionOccurrences, AddressOf Me.DetachSqlExceptionOccurrences)
                End If
                Return Me._sqlExceptionOccurrences
            End Get
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'Start' value.
        ''' </summary>
        <DataMember()>  _
        Public Property Start() As DateTime
            Get
                Return Me._start
            End Get
            Set
                If ((Me._start = value)  _
                            = false) Then
                    Me.OnStartChanging(value)
                    Me.RaiseDataMemberChanging("Start")
                    Me.ValidateProperty("Start", value)
                    Me._start = value
                    Me.RaiseDataMemberChanged("Start")
                    Me.OnStartChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'Subject' value.
        ''' </summary>
        <DataMember(),  _
         StringLength(100)>  _
        Public Property Subject() As String
            Get
                Return Me._subject
            End Get
            Set
                If (String.Equals(Me._subject, value) = false) Then
                    Me.OnSubjectChanging(value)
                    Me.RaiseDataMemberChanging("Subject")
                    Me.ValidateProperty("Subject", value)
                    Me._subject = value
                    Me.RaiseDataMemberChanged("Subject")
                    Me.OnSubjectChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the associated <see cref="TimeMarker"/> entity.
        ''' </summary>
        <Association("TimeMarker_SqlAppointment", "TimeMarkerID", "TimeMarkersId", IsForeignKey:=true),  _
         XmlIgnore()>  _
        Public Property TimeMarker() As TimeMarker
            Get
                If (Me._timeMarker Is Nothing) Then
                    Me._timeMarker = New EntityRef(Of TimeMarker)(Me, "TimeMarker", AddressOf Me.FilterTimeMarker)
                End If
                Return Me._timeMarker.Entity
            End Get
            Set
                Dim previous As TimeMarker = Me.TimeMarker
                If (Object.Equals(previous, value) = false) Then
                    Me.ValidateProperty("TimeMarker", value)
                    If (Not (previous) Is Nothing) Then
                        Me._timeMarker.Entity = Nothing
                        previous.SqlAppointments.Remove(Me)
                    End If
                    If (Not (value) Is Nothing) Then
                        Me.TimeMarkerID = value.TimeMarkersId
                    Else
                        Me.TimeMarkerID = CType(Nothing, Nullable(Of Integer))
                    End If
                    Me._timeMarker.Entity = value
                    If (Not (value) Is Nothing) Then
                        value.SqlAppointments.Add(Me)
                    End If
                    Me.RaisePropertyChanged("TimeMarker")
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'TimeMarkerID' value.
        ''' </summary>
        <DataMember(),  _
         RoundtripOriginal()>  _
        Public Property TimeMarkerID() As Nullable(Of Integer)
            Get
                Return Me._timeMarkerID
            End Get
            Set
                If (Me._timeMarkerID.Equals(value) = false) Then
                    Me.OnTimeMarkerIDChanging(value)
                    Me.RaiseDataMemberChanging("TimeMarkerID")
                    Me.ValidateProperty("TimeMarkerID", value)
                    Me._timeMarkerID = value
                    Me.RaiseDataMemberChanged("TimeMarkerID")
                    Me.OnTimeMarkerIDChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'TimeZoneString' value.
        ''' </summary>
        <DataMember(),  _
         StringLength(100)>  _
        Public Property TimeZoneString() As String
            Get
                Return Me._timeZoneString
            End Get
            Set
                If (String.Equals(Me._timeZoneString, value) = false) Then
                    Me.OnTimeZoneStringChanging(value)
                    Me.RaiseDataMemberChanging("TimeZoneString")
                    Me.ValidateProperty("TimeZoneString", value)
                    Me._timeZoneString = value
                    Me.RaiseDataMemberChanged("TimeZoneString")
                    Me.OnTimeZoneStringChanged
                End If
            End Set
        End Property
        
        Private Function FilterCategory(ByVal entity As Category) As Boolean
            Return Object.Equals(entity.CategoryID, Me.CategoryID)
        End Function
        
        Private Sub AttachSqlAppointmentResources(ByVal entity As SqlAppointmentResource)
            entity.SqlAppointment = Me
        End Sub
        
        Private Sub DetachSqlAppointmentResources(ByVal entity As SqlAppointmentResource)
            entity.SqlAppointment = Nothing
        End Sub
        
        Private Function FilterSqlAppointmentResources(ByVal entity As SqlAppointmentResource) As Boolean
            Return Object.Equals(entity.SqlAppointments_SqlAppointmentId, Me.SqlAppointmentId)
        End Function
        
        Private Sub AttachSqlExceptionOccurrences(ByVal entity As SqlExceptionOccurrence)
            entity.SqlAppointment = Me
        End Sub
        
        Private Sub DetachSqlExceptionOccurrences(ByVal entity As SqlExceptionOccurrence)
            entity.SqlAppointment = Nothing
        End Sub
        
        Private Function FilterSqlExceptionOccurrences(ByVal entity As SqlExceptionOccurrence) As Boolean
            Return Object.Equals(entity.MasterSqlAppointmentId, Me.SqlAppointmentId)
        End Function
        
        Private Function FilterTimeMarker(ByVal entity As TimeMarker) As Boolean
            Return Object.Equals(entity.TimeMarkersId, Me.TimeMarkerID)
        End Function
        
        ''' <summary>
        ''' Computes a value from the key fields that uniquely identifies this entity instance.
        ''' </summary>
        ''' <returns>An object instance that uniquely identifies this entity instance.</returns>
        Public Overrides Function GetIdentity() As Object
            Return Me._sqlAppointmentId
        End Function
    End Class
    
    ''' <summary>
    ''' The 'SqlAppointmentResource' entity class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/ScheduleViewDB.Web")>  _
    Partial Public NotInheritable Class SqlAppointmentResource
        Inherits Entity
        
        Private _manyToManyWorkaround As Nullable(Of Boolean)
        
        Private _sqlAppointment As EntityRef(Of SqlAppointment)
        
        Private _sqlAppointments_SqlAppointmentId As Integer
        
        Private _sqlResource As EntityRef(Of SqlResource)
        
        Private _sqlResources_SqlResourceId As Integer
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub
        Private Partial Sub OnManyToManyWorkaroundChanging(ByVal value As Nullable(Of Boolean))
        End Sub
        Private Partial Sub OnManyToManyWorkaroundChanged()
        End Sub
        Private Partial Sub OnSqlAppointments_SqlAppointmentIdChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnSqlAppointments_SqlAppointmentIdChanged()
        End Sub
        Private Partial Sub OnSqlResources_SqlResourceIdChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnSqlResources_SqlResourceIdChanged()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="SqlAppointmentResource"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Gets or sets the 'ManyToManyWorkaround' value.
        ''' </summary>
        <DataMember()>  _
        Public Property ManyToManyWorkaround() As Nullable(Of Boolean)
            Get
                Return Me._manyToManyWorkaround
            End Get
            Set
                If (Me._manyToManyWorkaround.Equals(value) = false) Then
                    Me.OnManyToManyWorkaroundChanging(value)
                    Me.RaiseDataMemberChanging("ManyToManyWorkaround")
                    Me.ValidateProperty("ManyToManyWorkaround", value)
                    Me._manyToManyWorkaround = value
                    Me.RaiseDataMemberChanged("ManyToManyWorkaround")
                    Me.OnManyToManyWorkaroundChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the associated <see cref="SqlAppointment"/> entity.
        ''' </summary>
        <Association("SqlAppointment_SqlAppointmentResource", "SqlAppointments_SqlAppointmentId", "SqlAppointmentId", IsForeignKey:=true),  _
         XmlIgnore()>  _
        Public Property SqlAppointment() As SqlAppointment
            Get
                If (Me._sqlAppointment Is Nothing) Then
                    Me._sqlAppointment = New EntityRef(Of SqlAppointment)(Me, "SqlAppointment", AddressOf Me.FilterSqlAppointment)
                End If
                Return Me._sqlAppointment.Entity
            End Get
            Set
                Dim previous As SqlAppointment = Me.SqlAppointment
                If (Object.Equals(previous, value) = false) Then
                    Me.ValidateProperty("SqlAppointment", value)
                    If (Not (previous) Is Nothing) Then
                        Me._sqlAppointment.Entity = Nothing
                        previous.SqlAppointmentResources.Remove(Me)
                    End If
                    If (Not (value) Is Nothing) Then
                        Me.SqlAppointments_SqlAppointmentId = value.SqlAppointmentId
                    Else
                        Me.SqlAppointments_SqlAppointmentId = CType(Nothing, Integer)
                    End If
                    Me._sqlAppointment.Entity = value
                    If (Not (value) Is Nothing) Then
                        value.SqlAppointmentResources.Add(Me)
                    End If
                    Me.RaisePropertyChanged("SqlAppointment")
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'SqlAppointments_SqlAppointmentId' value.
        ''' </summary>
        <DataMember(),  _
         Key(),  _
         RoundtripOriginal()>  _
        Public Property SqlAppointments_SqlAppointmentId() As Integer
            Get
                Return Me._sqlAppointments_SqlAppointmentId
            End Get
            Set
                If ((Me._sqlAppointments_SqlAppointmentId = value)  _
                            = false) Then
                    Me.OnSqlAppointments_SqlAppointmentIdChanging(value)
                    Me.RaiseDataMemberChanging("SqlAppointments_SqlAppointmentId")
                    Me.ValidateProperty("SqlAppointments_SqlAppointmentId", value)
                    Me._sqlAppointments_SqlAppointmentId = value
                    Me.RaiseDataMemberChanged("SqlAppointments_SqlAppointmentId")
                    Me.OnSqlAppointments_SqlAppointmentIdChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the associated <see cref="SqlResource"/> entity.
        ''' </summary>
        <Association("SqlResource_SqlAppointmentResource", "SqlResources_SqlResourceId", "SqlResourceId", IsForeignKey:=true),  _
         XmlIgnore()>  _
        Public Property SqlResource() As SqlResource
            Get
                If (Me._sqlResource Is Nothing) Then
                    Me._sqlResource = New EntityRef(Of SqlResource)(Me, "SqlResource", AddressOf Me.FilterSqlResource)
                End If
                Return Me._sqlResource.Entity
            End Get
            Set
                Dim previous As SqlResource = Me.SqlResource
                If (Object.Equals(previous, value) = false) Then
                    Me.ValidateProperty("SqlResource", value)
                    If (Not (previous) Is Nothing) Then
                        Me._sqlResource.Entity = Nothing
                        previous.SqlAppointmentResources.Remove(Me)
                    End If
                    If (Not (value) Is Nothing) Then
                        Me.SqlResources_SqlResourceId = value.SqlResourceId
                    Else
                        Me.SqlResources_SqlResourceId = CType(Nothing, Integer)
                    End If
                    Me._sqlResource.Entity = value
                    If (Not (value) Is Nothing) Then
                        value.SqlAppointmentResources.Add(Me)
                    End If
                    Me.RaisePropertyChanged("SqlResource")
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'SqlResources_SqlResourceId' value.
        ''' </summary>
        <DataMember(),  _
         Key(),  _
         RoundtripOriginal()>  _
        Public Property SqlResources_SqlResourceId() As Integer
            Get
                Return Me._sqlResources_SqlResourceId
            End Get
            Set
                If ((Me._sqlResources_SqlResourceId = value)  _
                            = false) Then
                    Me.OnSqlResources_SqlResourceIdChanging(value)
                    Me.RaiseDataMemberChanging("SqlResources_SqlResourceId")
                    Me.ValidateProperty("SqlResources_SqlResourceId", value)
                    Me._sqlResources_SqlResourceId = value
                    Me.RaiseDataMemberChanged("SqlResources_SqlResourceId")
                    Me.OnSqlResources_SqlResourceIdChanged
                End If
            End Set
        End Property
        
        Private Function FilterSqlAppointment(ByVal entity As SqlAppointment) As Boolean
            Return Object.Equals(entity.SqlAppointmentId, Me.SqlAppointments_SqlAppointmentId)
        End Function
        
        Private Function FilterSqlResource(ByVal entity As SqlResource) As Boolean
            Return Object.Equals(entity.SqlResourceId, Me.SqlResources_SqlResourceId)
        End Function
        
        ''' <summary>
        ''' Computes a value from the key fields that uniquely identifies this entity instance.
        ''' </summary>
        ''' <returns>An object instance that uniquely identifies this entity instance.</returns>
        Public Overrides Function GetIdentity() As Object
            Return EntityKey.Create(Me._sqlAppointments_SqlAppointmentId, Me._sqlResources_SqlResourceId)
        End Function
    End Class
    
    ''' <summary>
    ''' The 'SqlExceptionAppointment' entity class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/ScheduleViewDB.Web")>  _
    Partial Public NotInheritable Class SqlExceptionAppointment
        Inherits Entity
        
        Private _body As String
        
        Private _category As EntityRef(Of Category)
        
        Private _categoryID As Nullable(Of Integer)
        
        Private _end As DateTime
        
        Private _exceptionId As Integer
        
        Private _importance As Integer
        
        Private _isAllDayEvent As Boolean
        
        Private _sqlExceptionOccurrence As EntityRef(Of SqlExceptionOccurrence)
        
        Private _sqlExceptionResources As EntityCollection(Of SqlExceptionResource)
        
        Private _start As DateTime
        
        Private _subject As String
        
        Private _timeMarker As EntityRef(Of TimeMarker)
        
        Private _timeMarkerID As Nullable(Of Integer)
        
        Private _timeZoneString As String
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub
        Private Partial Sub OnBodyChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnBodyChanged()
        End Sub
        Private Partial Sub OnCategoryIDChanging(ByVal value As Nullable(Of Integer))
        End Sub
        Private Partial Sub OnCategoryIDChanged()
        End Sub
        Private Partial Sub OnEndChanging(ByVal value As DateTime)
        End Sub
        Private Partial Sub OnEndChanged()
        End Sub
        Private Partial Sub OnExceptionIdChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnExceptionIdChanged()
        End Sub
        Private Partial Sub OnImportanceChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnImportanceChanged()
        End Sub
        Private Partial Sub OnIsAllDayEventChanging(ByVal value As Boolean)
        End Sub
        Private Partial Sub OnIsAllDayEventChanged()
        End Sub
        Private Partial Sub OnStartChanging(ByVal value As DateTime)
        End Sub
        Private Partial Sub OnStartChanged()
        End Sub
        Private Partial Sub OnSubjectChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnSubjectChanged()
        End Sub
        Private Partial Sub OnTimeMarkerIDChanging(ByVal value As Nullable(Of Integer))
        End Sub
        Private Partial Sub OnTimeMarkerIDChanged()
        End Sub
        Private Partial Sub OnTimeZoneStringChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnTimeZoneStringChanged()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="SqlExceptionAppointment"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Gets or sets the 'Body' value.
        ''' </summary>
        <DataMember(),  _
         StringLength(500)>  _
        Public Property Body() As String
            Get
                Return Me._body
            End Get
            Set
                If (String.Equals(Me._body, value) = false) Then
                    Me.OnBodyChanging(value)
                    Me.RaiseDataMemberChanging("Body")
                    Me.ValidateProperty("Body", value)
                    Me._body = value
                    Me.RaiseDataMemberChanged("Body")
                    Me.OnBodyChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the associated <see cref="Category"/> entity.
        ''' </summary>
        <Association("Category_SqlExceptionAppointment", "CategoryID", "CategoryID", IsForeignKey:=true),  _
         XmlIgnore()>  _
        Public Property Category() As Category
            Get
                If (Me._category Is Nothing) Then
                    Me._category = New EntityRef(Of Category)(Me, "Category", AddressOf Me.FilterCategory)
                End If
                Return Me._category.Entity
            End Get
            Set
                Dim previous As Category = Me.Category
                If (Object.Equals(previous, value) = false) Then
                    Me.ValidateProperty("Category", value)
                    If (Not (previous) Is Nothing) Then
                        Me._category.Entity = Nothing
                        previous.SqlExceptionAppointments.Remove(Me)
                    End If
                    If (Not (value) Is Nothing) Then
                        Me.CategoryID = value.CategoryID
                    Else
                        Me.CategoryID = CType(Nothing, Nullable(Of Integer))
                    End If
                    Me._category.Entity = value
                    If (Not (value) Is Nothing) Then
                        value.SqlExceptionAppointments.Add(Me)
                    End If
                    Me.RaisePropertyChanged("Category")
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'CategoryID' value.
        ''' </summary>
        <DataMember(),  _
         RoundtripOriginal()>  _
        Public Property CategoryID() As Nullable(Of Integer)
            Get
                Return Me._categoryID
            End Get
            Set
                If (Me._categoryID.Equals(value) = false) Then
                    Me.OnCategoryIDChanging(value)
                    Me.RaiseDataMemberChanging("CategoryID")
                    Me.ValidateProperty("CategoryID", value)
                    Me._categoryID = value
                    Me.RaiseDataMemberChanged("CategoryID")
                    Me.OnCategoryIDChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'End' value.
        ''' </summary>
        <DataMember()>  _
        Public Property [End]() As DateTime
            Get
                Return Me._end
            End Get
            Set
                If ((Me._end = value)  _
                            = false) Then
                    Me.OnEndChanging(value)
                    Me.RaiseDataMemberChanging("End")
                    Me.ValidateProperty("End", value)
                    Me._end = value
                    Me.RaiseDataMemberChanged("End")
                    Me.OnEndChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'ExceptionId' value.
        ''' </summary>
        <DataMember(),  _
         Key(),  _
         RoundtripOriginal()>  _
        Public Property ExceptionId() As Integer
            Get
                Return Me._exceptionId
            End Get
            Set
                If ((Me._exceptionId = value)  _
                            = false) Then
                    Me.OnExceptionIdChanging(value)
                    Me.RaiseDataMemberChanging("ExceptionId")
                    Me.ValidateProperty("ExceptionId", value)
                    Me._exceptionId = value
                    Me.RaiseDataMemberChanged("ExceptionId")
                    Me.OnExceptionIdChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'Importance' value.
        ''' </summary>
        <DataMember()>  _
        Public Property Importance() As Integer
            Get
                Return Me._importance
            End Get
            Set
                If ((Me._importance = value)  _
                            = false) Then
                    Me.OnImportanceChanging(value)
                    Me.RaiseDataMemberChanging("Importance")
                    Me.ValidateProperty("Importance", value)
                    Me._importance = value
                    Me.RaiseDataMemberChanged("Importance")
                    Me.OnImportanceChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'IsAllDayEvent' value.
        ''' </summary>
        <DataMember()>  _
        Public Property IsAllDayEvent() As Boolean
            Get
                Return Me._isAllDayEvent
            End Get
            Set
                If ((Me._isAllDayEvent = value)  _
                            = false) Then
                    Me.OnIsAllDayEventChanging(value)
                    Me.RaiseDataMemberChanging("IsAllDayEvent")
                    Me.ValidateProperty("IsAllDayEvent", value)
                    Me._isAllDayEvent = value
                    Me.RaiseDataMemberChanged("IsAllDayEvent")
                    Me.OnIsAllDayEventChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the associated <see cref="SqlExceptionOccurrence"/> entity.
        ''' </summary>
        <Association("SqlExceptionOccurrence_SqlExceptionAppointment", "ExceptionId", "ExceptionId", IsForeignKey:=true),  _
         XmlIgnore()>  _
        Public Property SqlExceptionOccurrence() As SqlExceptionOccurrence
            Get
                If (Me._sqlExceptionOccurrence Is Nothing) Then
                    Me._sqlExceptionOccurrence = New EntityRef(Of SqlExceptionOccurrence)(Me, "SqlExceptionOccurrence", AddressOf Me.FilterSqlExceptionOccurrence)
                End If
                Return Me._sqlExceptionOccurrence.Entity
            End Get
            Set
                Dim previous As SqlExceptionOccurrence = Me.SqlExceptionOccurrence
                If (Object.Equals(previous, value) = false) Then
                    Me.ValidateProperty("SqlExceptionOccurrence", value)
                    If (Not (previous) Is Nothing) Then
                        Me._sqlExceptionOccurrence.Entity = Nothing
                        previous.SqlExceptionAppointment = Nothing
                    End If
                    If (Not (value) Is Nothing) Then
                        Me.ExceptionId = value.ExceptionId
                    Else
                        Me.ExceptionId = CType(Nothing, Integer)
                    End If
                    Me._sqlExceptionOccurrence.Entity = value
                    If (Not (value) Is Nothing) Then
                        value.SqlExceptionAppointment = Me
                    End If
                    Me.RaisePropertyChanged("SqlExceptionOccurrence")
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets the collection of associated <see cref="SqlExceptionResource"/> entity instances.
        ''' </summary>
        <Association("SqlExceptionAppointment_SqlExceptionResource", "ExceptionId", "SqlExceptionAppointments_ExceptionId"),  _
         XmlIgnore()>  _
        Public ReadOnly Property SqlExceptionResources() As EntityCollection(Of SqlExceptionResource)
            Get
                If (Me._sqlExceptionResources Is Nothing) Then
                    Me._sqlExceptionResources = New EntityCollection(Of SqlExceptionResource)(Me, "SqlExceptionResources", AddressOf Me.FilterSqlExceptionResources, AddressOf Me.AttachSqlExceptionResources, AddressOf Me.DetachSqlExceptionResources)
                End If
                Return Me._sqlExceptionResources
            End Get
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'Start' value.
        ''' </summary>
        <DataMember()>  _
        Public Property Start() As DateTime
            Get
                Return Me._start
            End Get
            Set
                If ((Me._start = value)  _
                            = false) Then
                    Me.OnStartChanging(value)
                    Me.RaiseDataMemberChanging("Start")
                    Me.ValidateProperty("Start", value)
                    Me._start = value
                    Me.RaiseDataMemberChanged("Start")
                    Me.OnStartChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'Subject' value.
        ''' </summary>
        <DataMember(),  _
         StringLength(100)>  _
        Public Property Subject() As String
            Get
                Return Me._subject
            End Get
            Set
                If (String.Equals(Me._subject, value) = false) Then
                    Me.OnSubjectChanging(value)
                    Me.RaiseDataMemberChanging("Subject")
                    Me.ValidateProperty("Subject", value)
                    Me._subject = value
                    Me.RaiseDataMemberChanged("Subject")
                    Me.OnSubjectChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the associated <see cref="TimeMarker"/> entity.
        ''' </summary>
        <Association("TimeMarker_SqlExceptionAppointment", "TimeMarkerID", "TimeMarkersId", IsForeignKey:=true),  _
         XmlIgnore()>  _
        Public Property TimeMarker() As TimeMarker
            Get
                If (Me._timeMarker Is Nothing) Then
                    Me._timeMarker = New EntityRef(Of TimeMarker)(Me, "TimeMarker", AddressOf Me.FilterTimeMarker)
                End If
                Return Me._timeMarker.Entity
            End Get
            Set
                Dim previous As TimeMarker = Me.TimeMarker
                If (Object.Equals(previous, value) = false) Then
                    Me.ValidateProperty("TimeMarker", value)
                    If (Not (previous) Is Nothing) Then
                        Me._timeMarker.Entity = Nothing
                        previous.SqlExceptionAppointments.Remove(Me)
                    End If
                    If (Not (value) Is Nothing) Then
                        Me.TimeMarkerID = value.TimeMarkersId
                    Else
                        Me.TimeMarkerID = CType(Nothing, Nullable(Of Integer))
                    End If
                    Me._timeMarker.Entity = value
                    If (Not (value) Is Nothing) Then
                        value.SqlExceptionAppointments.Add(Me)
                    End If
                    Me.RaisePropertyChanged("TimeMarker")
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'TimeMarkerID' value.
        ''' </summary>
        <DataMember(),  _
         RoundtripOriginal()>  _
        Public Property TimeMarkerID() As Nullable(Of Integer)
            Get
                Return Me._timeMarkerID
            End Get
            Set
                If (Me._timeMarkerID.Equals(value) = false) Then
                    Me.OnTimeMarkerIDChanging(value)
                    Me.RaiseDataMemberChanging("TimeMarkerID")
                    Me.ValidateProperty("TimeMarkerID", value)
                    Me._timeMarkerID = value
                    Me.RaiseDataMemberChanged("TimeMarkerID")
                    Me.OnTimeMarkerIDChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'TimeZoneString' value.
        ''' </summary>
        <DataMember(),  _
         StringLength(100)>  _
        Public Property TimeZoneString() As String
            Get
                Return Me._timeZoneString
            End Get
            Set
                If (String.Equals(Me._timeZoneString, value) = false) Then
                    Me.OnTimeZoneStringChanging(value)
                    Me.RaiseDataMemberChanging("TimeZoneString")
                    Me.ValidateProperty("TimeZoneString", value)
                    Me._timeZoneString = value
                    Me.RaiseDataMemberChanged("TimeZoneString")
                    Me.OnTimeZoneStringChanged
                End If
            End Set
        End Property
        
        Private Function FilterCategory(ByVal entity As Category) As Boolean
            Return Object.Equals(entity.CategoryID, Me.CategoryID)
        End Function
        
        Private Function FilterSqlExceptionOccurrence(ByVal entity As SqlExceptionOccurrence) As Boolean
            Return Object.Equals(entity.ExceptionId, Me.ExceptionId)
        End Function
        
        Private Sub AttachSqlExceptionResources(ByVal entity As SqlExceptionResource)
            entity.SqlExceptionAppointment = Me
        End Sub
        
        Private Sub DetachSqlExceptionResources(ByVal entity As SqlExceptionResource)
            entity.SqlExceptionAppointment = Nothing
        End Sub
        
        Private Function FilterSqlExceptionResources(ByVal entity As SqlExceptionResource) As Boolean
            Return Object.Equals(entity.SqlExceptionAppointments_ExceptionId, Me.ExceptionId)
        End Function
        
        Private Function FilterTimeMarker(ByVal entity As TimeMarker) As Boolean
            Return Object.Equals(entity.TimeMarkersId, Me.TimeMarkerID)
        End Function
        
        ''' <summary>
        ''' Computes a value from the key fields that uniquely identifies this entity instance.
        ''' </summary>
        ''' <returns>An object instance that uniquely identifies this entity instance.</returns>
        Public Overrides Function GetIdentity() As Object
            Return Me._exceptionId
        End Function
    End Class
    
    ''' <summary>
    ''' The 'SqlExceptionOccurrence' entity class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/ScheduleViewDB.Web")>  _
    Partial Public NotInheritable Class SqlExceptionOccurrence
        Inherits Entity
        
        Private _exceptionDate As DateTime
        
        Private _exceptionId As Integer
        
        Private _masterSqlAppointmentId As Integer
        
        Private _sqlAppointment As EntityRef(Of SqlAppointment)
        
        Private _sqlExceptionAppointment As EntityRef(Of SqlExceptionAppointment)
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub
        Private Partial Sub OnExceptionDateChanging(ByVal value As DateTime)
        End Sub
        Private Partial Sub OnExceptionDateChanged()
        End Sub
        Private Partial Sub OnExceptionIdChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnExceptionIdChanged()
        End Sub
        Private Partial Sub OnMasterSqlAppointmentIdChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnMasterSqlAppointmentIdChanged()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="SqlExceptionOccurrence"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Gets or sets the 'ExceptionDate' value.
        ''' </summary>
        <DataMember()>  _
        Public Property ExceptionDate() As DateTime
            Get
                Return Me._exceptionDate
            End Get
            Set
                If ((Me._exceptionDate = value)  _
                            = false) Then
                    Me.OnExceptionDateChanging(value)
                    Me.RaiseDataMemberChanging("ExceptionDate")
                    Me.ValidateProperty("ExceptionDate", value)
                    Me._exceptionDate = value
                    Me.RaiseDataMemberChanged("ExceptionDate")
                    Me.OnExceptionDateChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'ExceptionId' value.
        ''' </summary>
        <DatabaseGenerated(DatabaseGeneratedOption.Identity),  _
         DataMember(),  _
         Editable(false, AllowInitialValue:=true),  _
         Key(),  _
         RoundtripOriginal()>  _
        Public Property ExceptionId() As Integer
            Get
                Return Me._exceptionId
            End Get
            Set
                If ((Me._exceptionId = value)  _
                            = false) Then
                    Me.OnExceptionIdChanging(value)
                    Me.ValidateProperty("ExceptionId", value)
                    Me._exceptionId = value
                    Me.RaisePropertyChanged("ExceptionId")
                    Me.OnExceptionIdChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'MasterSqlAppointmentId' value.
        ''' </summary>
        <DataMember(),  _
         RoundtripOriginal()>  _
        Public Property MasterSqlAppointmentId() As Integer
            Get
                Return Me._masterSqlAppointmentId
            End Get
            Set
                If ((Me._masterSqlAppointmentId = value)  _
                            = false) Then
                    Me.OnMasterSqlAppointmentIdChanging(value)
                    Me.RaiseDataMemberChanging("MasterSqlAppointmentId")
                    Me.ValidateProperty("MasterSqlAppointmentId", value)
                    Me._masterSqlAppointmentId = value
                    Me.RaiseDataMemberChanged("MasterSqlAppointmentId")
                    Me.OnMasterSqlAppointmentIdChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the associated <see cref="SqlAppointment"/> entity.
        ''' </summary>
        <Association("SqlAppointment_SqlExceptionOccurrence", "MasterSqlAppointmentId", "SqlAppointmentId", IsForeignKey:=true),  _
         XmlIgnore()>  _
        Public Property SqlAppointment() As SqlAppointment
            Get
                If (Me._sqlAppointment Is Nothing) Then
                    Me._sqlAppointment = New EntityRef(Of SqlAppointment)(Me, "SqlAppointment", AddressOf Me.FilterSqlAppointment)
                End If
                Return Me._sqlAppointment.Entity
            End Get
            Set
                Dim previous As SqlAppointment = Me.SqlAppointment
                If (Object.Equals(previous, value) = false) Then
                    Me.ValidateProperty("SqlAppointment", value)
                    If (Not (previous) Is Nothing) Then
                        Me._sqlAppointment.Entity = Nothing
                        previous.SqlExceptionOccurrences.Remove(Me)
                    End If
                    If (Not (value) Is Nothing) Then
                        Me.MasterSqlAppointmentId = value.SqlAppointmentId
                    Else
                        Me.MasterSqlAppointmentId = CType(Nothing, Integer)
                    End If
                    Me._sqlAppointment.Entity = value
                    If (Not (value) Is Nothing) Then
                        value.SqlExceptionOccurrences.Add(Me)
                    End If
                    Me.RaisePropertyChanged("SqlAppointment")
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the associated <see cref="SqlExceptionAppointment"/> entity.
        ''' </summary>
        <Association("SqlExceptionOccurrence_SqlExceptionAppointment", "ExceptionId", "ExceptionId"),  _
         XmlIgnore()>  _
        Public Property SqlExceptionAppointment() As SqlExceptionAppointment
            Get
                If (Me._sqlExceptionAppointment Is Nothing) Then
                    Me._sqlExceptionAppointment = New EntityRef(Of SqlExceptionAppointment)(Me, "SqlExceptionAppointment", AddressOf Me.FilterSqlExceptionAppointment)
                End If
                Return Me._sqlExceptionAppointment.Entity
            End Get
            Set
                Dim previous As SqlExceptionAppointment = Me.SqlExceptionAppointment
                If (Object.Equals(previous, value) = false) Then
                    Me.ValidateProperty("SqlExceptionAppointment", value)
                    If (Not (previous) Is Nothing) Then
                        Me._sqlExceptionAppointment.Entity = Nothing
                        previous.SqlExceptionOccurrence = Nothing
                    End If
                    Me._sqlExceptionAppointment.Entity = value
                    If (Not (value) Is Nothing) Then
                        value.SqlExceptionOccurrence = Me
                    End If
                    Me.RaisePropertyChanged("SqlExceptionAppointment")
                End If
            End Set
        End Property
        
        Private Function FilterSqlAppointment(ByVal entity As SqlAppointment) As Boolean
            Return Object.Equals(entity.SqlAppointmentId, Me.MasterSqlAppointmentId)
        End Function
        
        Private Function FilterSqlExceptionAppointment(ByVal entity As SqlExceptionAppointment) As Boolean
            Return Object.Equals(entity.ExceptionId, Me.ExceptionId)
        End Function
        
        ''' <summary>
        ''' Computes a value from the key fields that uniquely identifies this entity instance.
        ''' </summary>
        ''' <returns>An object instance that uniquely identifies this entity instance.</returns>
        Public Overrides Function GetIdentity() As Object
            Return Me._exceptionId
        End Function
    End Class
    
    ''' <summary>
    ''' The 'SqlExceptionResource' entity class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/ScheduleViewDB.Web")>  _
    Partial Public NotInheritable Class SqlExceptionResource
        Inherits Entity
        
        Private _manyToManyWorkaround As Nullable(Of Boolean)
        
        Private _sqlExceptionAppointment As EntityRef(Of SqlExceptionAppointment)
        
        Private _sqlExceptionAppointments_ExceptionId As Integer
        
        Private _sqlResource As EntityRef(Of SqlResource)
        
        Private _sqlResources_SqlResourceId As Integer
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub
        Private Partial Sub OnManyToManyWorkaroundChanging(ByVal value As Nullable(Of Boolean))
        End Sub
        Private Partial Sub OnManyToManyWorkaroundChanged()
        End Sub
        Private Partial Sub OnSqlExceptionAppointments_ExceptionIdChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnSqlExceptionAppointments_ExceptionIdChanged()
        End Sub
        Private Partial Sub OnSqlResources_SqlResourceIdChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnSqlResources_SqlResourceIdChanged()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="SqlExceptionResource"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Gets or sets the 'ManyToManyWorkaround' value.
        ''' </summary>
        <DataMember()>  _
        Public Property ManyToManyWorkaround() As Nullable(Of Boolean)
            Get
                Return Me._manyToManyWorkaround
            End Get
            Set
                If (Me._manyToManyWorkaround.Equals(value) = false) Then
                    Me.OnManyToManyWorkaroundChanging(value)
                    Me.RaiseDataMemberChanging("ManyToManyWorkaround")
                    Me.ValidateProperty("ManyToManyWorkaround", value)
                    Me._manyToManyWorkaround = value
                    Me.RaiseDataMemberChanged("ManyToManyWorkaround")
                    Me.OnManyToManyWorkaroundChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the associated <see cref="SqlExceptionAppointment"/> entity.
        ''' </summary>
        <Association("SqlExceptionAppointment_SqlExceptionResource", "SqlExceptionAppointments_ExceptionId", "ExceptionId", IsForeignKey:=true),  _
         XmlIgnore()>  _
        Public Property SqlExceptionAppointment() As SqlExceptionAppointment
            Get
                If (Me._sqlExceptionAppointment Is Nothing) Then
                    Me._sqlExceptionAppointment = New EntityRef(Of SqlExceptionAppointment)(Me, "SqlExceptionAppointment", AddressOf Me.FilterSqlExceptionAppointment)
                End If
                Return Me._sqlExceptionAppointment.Entity
            End Get
            Set
                Dim previous As SqlExceptionAppointment = Me.SqlExceptionAppointment
                If (Object.Equals(previous, value) = false) Then
                    Me.ValidateProperty("SqlExceptionAppointment", value)
                    If (Not (previous) Is Nothing) Then
                        Me._sqlExceptionAppointment.Entity = Nothing
                        previous.SqlExceptionResources.Remove(Me)
                    End If
                    If (Not (value) Is Nothing) Then
                        Me.SqlExceptionAppointments_ExceptionId = value.ExceptionId
                    Else
                        Me.SqlExceptionAppointments_ExceptionId = CType(Nothing, Integer)
                    End If
                    Me._sqlExceptionAppointment.Entity = value
                    If (Not (value) Is Nothing) Then
                        value.SqlExceptionResources.Add(Me)
                    End If
                    Me.RaisePropertyChanged("SqlExceptionAppointment")
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'SqlExceptionAppointments_ExceptionId' value.
        ''' </summary>
        <DataMember(),  _
         Key(),  _
         RoundtripOriginal()>  _
        Public Property SqlExceptionAppointments_ExceptionId() As Integer
            Get
                Return Me._sqlExceptionAppointments_ExceptionId
            End Get
            Set
                If ((Me._sqlExceptionAppointments_ExceptionId = value)  _
                            = false) Then
                    Me.OnSqlExceptionAppointments_ExceptionIdChanging(value)
                    Me.RaiseDataMemberChanging("SqlExceptionAppointments_ExceptionId")
                    Me.ValidateProperty("SqlExceptionAppointments_ExceptionId", value)
                    Me._sqlExceptionAppointments_ExceptionId = value
                    Me.RaiseDataMemberChanged("SqlExceptionAppointments_ExceptionId")
                    Me.OnSqlExceptionAppointments_ExceptionIdChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the associated <see cref="SqlResource"/> entity.
        ''' </summary>
        <Association("SqlResource_SqlExceptionResource", "SqlResources_SqlResourceId", "SqlResourceId", IsForeignKey:=true),  _
         XmlIgnore()>  _
        Public Property SqlResource() As SqlResource
            Get
                If (Me._sqlResource Is Nothing) Then
                    Me._sqlResource = New EntityRef(Of SqlResource)(Me, "SqlResource", AddressOf Me.FilterSqlResource)
                End If
                Return Me._sqlResource.Entity
            End Get
            Set
                Dim previous As SqlResource = Me.SqlResource
                If (Object.Equals(previous, value) = false) Then
                    Me.ValidateProperty("SqlResource", value)
                    If (Not (previous) Is Nothing) Then
                        Me._sqlResource.Entity = Nothing
                        previous.SqlExceptionResources.Remove(Me)
                    End If
                    If (Not (value) Is Nothing) Then
                        Me.SqlResources_SqlResourceId = value.SqlResourceId
                    Else
                        Me.SqlResources_SqlResourceId = CType(Nothing, Integer)
                    End If
                    Me._sqlResource.Entity = value
                    If (Not (value) Is Nothing) Then
                        value.SqlExceptionResources.Add(Me)
                    End If
                    Me.RaisePropertyChanged("SqlResource")
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'SqlResources_SqlResourceId' value.
        ''' </summary>
        <DataMember(),  _
         Key(),  _
         RoundtripOriginal()>  _
        Public Property SqlResources_SqlResourceId() As Integer
            Get
                Return Me._sqlResources_SqlResourceId
            End Get
            Set
                If ((Me._sqlResources_SqlResourceId = value)  _
                            = false) Then
                    Me.OnSqlResources_SqlResourceIdChanging(value)
                    Me.RaiseDataMemberChanging("SqlResources_SqlResourceId")
                    Me.ValidateProperty("SqlResources_SqlResourceId", value)
                    Me._sqlResources_SqlResourceId = value
                    Me.RaiseDataMemberChanged("SqlResources_SqlResourceId")
                    Me.OnSqlResources_SqlResourceIdChanged
                End If
            End Set
        End Property
        
        Private Function FilterSqlExceptionAppointment(ByVal entity As SqlExceptionAppointment) As Boolean
            Return Object.Equals(entity.ExceptionId, Me.SqlExceptionAppointments_ExceptionId)
        End Function
        
        Private Function FilterSqlResource(ByVal entity As SqlResource) As Boolean
            Return Object.Equals(entity.SqlResourceId, Me.SqlResources_SqlResourceId)
        End Function
        
        ''' <summary>
        ''' Computes a value from the key fields that uniquely identifies this entity instance.
        ''' </summary>
        ''' <returns>An object instance that uniquely identifies this entity instance.</returns>
        Public Overrides Function GetIdentity() As Object
            Return EntityKey.Create(Me._sqlExceptionAppointments_ExceptionId, Me._sqlResources_SqlResourceId)
        End Function
    End Class
    
    ''' <summary>
    ''' The 'SqlResource' entity class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/ScheduleViewDB.Web")>  _
    Partial Public NotInheritable Class SqlResource
        Inherits Entity
        
        Private _displayName As String
        
        Private _resourceName As String
        
        Private _sqlAppointmentResources As EntityCollection(Of SqlAppointmentResource)
        
        Private _sqlExceptionResources As EntityCollection(Of SqlExceptionResource)
        
        Private _sqlResourceId As Integer
        
        Private _sqlResourceType As EntityRef(Of SqlResourceType)
        
        Private _sqlResourceTypeId As Nullable(Of Integer)
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub
        Private Partial Sub OnDisplayNameChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnDisplayNameChanged()
        End Sub
        Private Partial Sub OnResourceNameChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnResourceNameChanged()
        End Sub
        Private Partial Sub OnSqlResourceIdChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnSqlResourceIdChanged()
        End Sub
        Private Partial Sub OnSqlResourceTypeIdChanging(ByVal value As Nullable(Of Integer))
        End Sub
        Private Partial Sub OnSqlResourceTypeIdChanged()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="SqlResource"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Gets or sets the 'DisplayName' value.
        ''' </summary>
        <DataMember(),  _
         StringLength(100)>  _
        Public Property DisplayName() As String
            Get
                Return Me._displayName
            End Get
            Set
                If (String.Equals(Me._displayName, value) = false) Then
                    Me.OnDisplayNameChanging(value)
                    Me.RaiseDataMemberChanging("DisplayName")
                    Me.ValidateProperty("DisplayName", value)
                    Me._displayName = value
                    Me.RaiseDataMemberChanged("DisplayName")
                    Me.OnDisplayNameChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'ResourceName' value.
        ''' </summary>
        <DataMember(),  _
         StringLength(100)>  _
        Public Property ResourceName() As String
            Get
                Return Me._resourceName
            End Get
            Set
                If (String.Equals(Me._resourceName, value) = false) Then
                    Me.OnResourceNameChanging(value)
                    Me.RaiseDataMemberChanging("ResourceName")
                    Me.ValidateProperty("ResourceName", value)
                    Me._resourceName = value
                    Me.RaiseDataMemberChanged("ResourceName")
                    Me.OnResourceNameChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets the collection of associated <see cref="SqlAppointmentResource"/> entity instances.
        ''' </summary>
        <Association("SqlResource_SqlAppointmentResource", "SqlResourceId", "SqlResources_SqlResourceId"),  _
         XmlIgnore()>  _
        Public ReadOnly Property SqlAppointmentResources() As EntityCollection(Of SqlAppointmentResource)
            Get
                If (Me._sqlAppointmentResources Is Nothing) Then
                    Me._sqlAppointmentResources = New EntityCollection(Of SqlAppointmentResource)(Me, "SqlAppointmentResources", AddressOf Me.FilterSqlAppointmentResources, AddressOf Me.AttachSqlAppointmentResources, AddressOf Me.DetachSqlAppointmentResources)
                End If
                Return Me._sqlAppointmentResources
            End Get
        End Property
        
        ''' <summary>
        ''' Gets the collection of associated <see cref="SqlExceptionResource"/> entity instances.
        ''' </summary>
        <Association("SqlResource_SqlExceptionResource", "SqlResourceId", "SqlResources_SqlResourceId"),  _
         XmlIgnore()>  _
        Public ReadOnly Property SqlExceptionResources() As EntityCollection(Of SqlExceptionResource)
            Get
                If (Me._sqlExceptionResources Is Nothing) Then
                    Me._sqlExceptionResources = New EntityCollection(Of SqlExceptionResource)(Me, "SqlExceptionResources", AddressOf Me.FilterSqlExceptionResources, AddressOf Me.AttachSqlExceptionResources, AddressOf Me.DetachSqlExceptionResources)
                End If
                Return Me._sqlExceptionResources
            End Get
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'SqlResourceId' value.
        ''' </summary>
        <DatabaseGenerated(DatabaseGeneratedOption.Identity),  _
         DataMember(),  _
         Editable(false, AllowInitialValue:=true),  _
         Key(),  _
         RoundtripOriginal()>  _
        Public Property SqlResourceId() As Integer
            Get
                Return Me._sqlResourceId
            End Get
            Set
                If ((Me._sqlResourceId = value)  _
                            = false) Then
                    Me.OnSqlResourceIdChanging(value)
                    Me.ValidateProperty("SqlResourceId", value)
                    Me._sqlResourceId = value
                    Me.RaisePropertyChanged("SqlResourceId")
                    Me.OnSqlResourceIdChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the associated <see cref="SqlResourceType"/> entity.
        ''' </summary>
        <Association("SqlResourceType_SqlResource", "SqlResourceTypeId", "SqlResourceTypeId", IsForeignKey:=true),  _
         XmlIgnore()>  _
        Public Property SqlResourceType() As SqlResourceType
            Get
                If (Me._sqlResourceType Is Nothing) Then
                    Me._sqlResourceType = New EntityRef(Of SqlResourceType)(Me, "SqlResourceType", AddressOf Me.FilterSqlResourceType)
                End If
                Return Me._sqlResourceType.Entity
            End Get
            Set
                Dim previous As SqlResourceType = Me.SqlResourceType
                If (Object.Equals(previous, value) = false) Then
                    Me.ValidateProperty("SqlResourceType", value)
                    If (Not (previous) Is Nothing) Then
                        Me._sqlResourceType.Entity = Nothing
                        previous.SqlResources.Remove(Me)
                    End If
                    If (Not (value) Is Nothing) Then
                        Me.SqlResourceTypeId = value.SqlResourceTypeId
                    Else
                        Me.SqlResourceTypeId = CType(Nothing, Nullable(Of Integer))
                    End If
                    Me._sqlResourceType.Entity = value
                    If (Not (value) Is Nothing) Then
                        value.SqlResources.Add(Me)
                    End If
                    Me.RaisePropertyChanged("SqlResourceType")
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'SqlResourceTypeId' value.
        ''' </summary>
        <DataMember(),  _
         RoundtripOriginal()>  _
        Public Property SqlResourceTypeId() As Nullable(Of Integer)
            Get
                Return Me._sqlResourceTypeId
            End Get
            Set
                If (Me._sqlResourceTypeId.Equals(value) = false) Then
                    Me.OnSqlResourceTypeIdChanging(value)
                    Me.RaiseDataMemberChanging("SqlResourceTypeId")
                    Me.ValidateProperty("SqlResourceTypeId", value)
                    Me._sqlResourceTypeId = value
                    Me.RaiseDataMemberChanged("SqlResourceTypeId")
                    Me.OnSqlResourceTypeIdChanged
                End If
            End Set
        End Property
        
        Private Sub AttachSqlAppointmentResources(ByVal entity As SqlAppointmentResource)
            entity.SqlResource = Me
        End Sub
        
        Private Sub DetachSqlAppointmentResources(ByVal entity As SqlAppointmentResource)
            entity.SqlResource = Nothing
        End Sub
        
        Private Function FilterSqlAppointmentResources(ByVal entity As SqlAppointmentResource) As Boolean
            Return Object.Equals(entity.SqlResources_SqlResourceId, Me.SqlResourceId)
        End Function
        
        Private Sub AttachSqlExceptionResources(ByVal entity As SqlExceptionResource)
            entity.SqlResource = Me
        End Sub
        
        Private Sub DetachSqlExceptionResources(ByVal entity As SqlExceptionResource)
            entity.SqlResource = Nothing
        End Sub
        
        Private Function FilterSqlExceptionResources(ByVal entity As SqlExceptionResource) As Boolean
            Return Object.Equals(entity.SqlResources_SqlResourceId, Me.SqlResourceId)
        End Function
        
        Private Function FilterSqlResourceType(ByVal entity As SqlResourceType) As Boolean
            Return Object.Equals(entity.SqlResourceTypeId, Me.SqlResourceTypeId)
        End Function
        
        ''' <summary>
        ''' Computes a value from the key fields that uniquely identifies this entity instance.
        ''' </summary>
        ''' <returns>An object instance that uniquely identifies this entity instance.</returns>
        Public Overrides Function GetIdentity() As Object
            Return Me._sqlResourceId
        End Function
    End Class
    
    ''' <summary>
    ''' The 'SqlResourceType' entity class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/ScheduleViewDB.Web")>  _
    Partial Public NotInheritable Class SqlResourceType
        Inherits Entity
        
        Private _allowMultipleSelection As Boolean
        
        Private _displayName As String
        
        Private _name As String
        
        Private _sqlResources As EntityCollection(Of SqlResource)
        
        Private _sqlResourceTypeId As Integer
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub
        Private Partial Sub OnAllowMultipleSelectionChanging(ByVal value As Boolean)
        End Sub
        Private Partial Sub OnAllowMultipleSelectionChanged()
        End Sub
        Private Partial Sub OnDisplayNameChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnDisplayNameChanged()
        End Sub
        Private Partial Sub OnNameChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnNameChanged()
        End Sub
        Private Partial Sub OnSqlResourceTypeIdChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnSqlResourceTypeIdChanged()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="SqlResourceType"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Gets or sets the 'AllowMultipleSelection' value.
        ''' </summary>
        <DataMember()>  _
        Public Property AllowMultipleSelection() As Boolean
            Get
                Return Me._allowMultipleSelection
            End Get
            Set
                If ((Me._allowMultipleSelection = value)  _
                            = false) Then
                    Me.OnAllowMultipleSelectionChanging(value)
                    Me.RaiseDataMemberChanging("AllowMultipleSelection")
                    Me.ValidateProperty("AllowMultipleSelection", value)
                    Me._allowMultipleSelection = value
                    Me.RaiseDataMemberChanged("AllowMultipleSelection")
                    Me.OnAllowMultipleSelectionChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'DisplayName' value.
        ''' </summary>
        <DataMember(),  _
         StringLength(100)>  _
        Public Property DisplayName() As String
            Get
                Return Me._displayName
            End Get
            Set
                If (String.Equals(Me._displayName, value) = false) Then
                    Me.OnDisplayNameChanging(value)
                    Me.RaiseDataMemberChanging("DisplayName")
                    Me.ValidateProperty("DisplayName", value)
                    Me._displayName = value
                    Me.RaiseDataMemberChanged("DisplayName")
                    Me.OnDisplayNameChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'Name' value.
        ''' </summary>
        <DataMember(),  _
         Required(),  _
         StringLength(100)>  _
        Public Property Name() As String
            Get
                Return Me._name
            End Get
            Set
                If (String.Equals(Me._name, value) = false) Then
                    Me.OnNameChanging(value)
                    Me.RaiseDataMemberChanging("Name")
                    Me.ValidateProperty("Name", value)
                    Me._name = value
                    Me.RaiseDataMemberChanged("Name")
                    Me.OnNameChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets the collection of associated <see cref="SqlResource"/> entity instances.
        ''' </summary>
        <Association("SqlResourceType_SqlResource", "SqlResourceTypeId", "SqlResourceTypeId"),  _
         XmlIgnore()>  _
        Public ReadOnly Property SqlResources() As EntityCollection(Of SqlResource)
            Get
                If (Me._sqlResources Is Nothing) Then
                    Me._sqlResources = New EntityCollection(Of SqlResource)(Me, "SqlResources", AddressOf Me.FilterSqlResources, AddressOf Me.AttachSqlResources, AddressOf Me.DetachSqlResources)
                End If
                Return Me._sqlResources
            End Get
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'SqlResourceTypeId' value.
        ''' </summary>
        <DatabaseGenerated(DatabaseGeneratedOption.Identity),  _
         DataMember(),  _
         Editable(false, AllowInitialValue:=true),  _
         Key(),  _
         RoundtripOriginal()>  _
        Public Property SqlResourceTypeId() As Integer
            Get
                Return Me._sqlResourceTypeId
            End Get
            Set
                If ((Me._sqlResourceTypeId = value)  _
                            = false) Then
                    Me.OnSqlResourceTypeIdChanging(value)
                    Me.ValidateProperty("SqlResourceTypeId", value)
                    Me._sqlResourceTypeId = value
                    Me.RaisePropertyChanged("SqlResourceTypeId")
                    Me.OnSqlResourceTypeIdChanged
                End If
            End Set
        End Property
        
        Private Sub AttachSqlResources(ByVal entity As SqlResource)
            entity.SqlResourceType = Me
        End Sub
        
        Private Sub DetachSqlResources(ByVal entity As SqlResource)
            entity.SqlResourceType = Nothing
        End Sub
        
        Private Function FilterSqlResources(ByVal entity As SqlResource) As Boolean
            Return Object.Equals(entity.SqlResourceTypeId, Me.SqlResourceTypeId)
        End Function
        
        ''' <summary>
        ''' Computes a value from the key fields that uniquely identifies this entity instance.
        ''' </summary>
        ''' <returns>An object instance that uniquely identifies this entity instance.</returns>
        Public Overrides Function GetIdentity() As Object
            Return Me._sqlResourceTypeId
        End Function
    End Class
    
    ''' <summary>
    ''' The DomainContext corresponding to the 'SVDomainService' DomainService.
    ''' </summary>
    Partial Public NotInheritable Class SVDomainContext
        Inherits DomainContext
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="SVDomainContext"/> class.
        ''' </summary>
        Public Sub New()
            Me.New(New WebDomainClient(Of ISVDomainServiceContract)(New Uri("ScheduleViewDB-Web-SVDomainService.svc", UriKind.Relative)))
        End Sub
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="SVDomainContext"/> class with the specified service URI.
        ''' </summary>
        ''' <param name="serviceUri">The SVDomainService service URI.</param>
        Public Sub New(ByVal serviceUri As Uri)
            Me.New(New WebDomainClient(Of ISVDomainServiceContract)(serviceUri))
        End Sub
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="SVDomainContext"/> class with the specified <paramref name="domainClient"/>.
        ''' </summary>
        ''' <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        Public Sub New(ByVal domainClient As DomainClient)
            MyBase.New(domainClient)
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Gets the set of <see cref="Category"/> entity instances that have been loaded into this <see cref="SVDomainContext"/> instance.
        ''' </summary>
        Public ReadOnly Property Categories() As EntitySet(Of Category)
            Get
                Return MyBase.EntityContainer.GetEntitySet(Of Category)
            End Get
        End Property
        
        ''' <summary>
        ''' Gets the set of <see cref="SqlAppointmentResource"/> entity instances that have been loaded into this <see cref="SVDomainContext"/> instance.
        ''' </summary>
        Public ReadOnly Property SqlAppointmentResources() As EntitySet(Of SqlAppointmentResource)
            Get
                Return MyBase.EntityContainer.GetEntitySet(Of SqlAppointmentResource)
            End Get
        End Property
        
        ''' <summary>
        ''' Gets the set of <see cref="SqlAppointment"/> entity instances that have been loaded into this <see cref="SVDomainContext"/> instance.
        ''' </summary>
        Public ReadOnly Property SqlAppointments() As EntitySet(Of SqlAppointment)
            Get
                Return MyBase.EntityContainer.GetEntitySet(Of SqlAppointment)
            End Get
        End Property
        
        ''' <summary>
        ''' Gets the set of <see cref="SqlExceptionAppointment"/> entity instances that have been loaded into this <see cref="SVDomainContext"/> instance.
        ''' </summary>
        Public ReadOnly Property SqlExceptionAppointments() As EntitySet(Of SqlExceptionAppointment)
            Get
                Return MyBase.EntityContainer.GetEntitySet(Of SqlExceptionAppointment)
            End Get
        End Property
        
        ''' <summary>
        ''' Gets the set of <see cref="SqlExceptionOccurrence"/> entity instances that have been loaded into this <see cref="SVDomainContext"/> instance.
        ''' </summary>
        Public ReadOnly Property SqlExceptionOccurrences() As EntitySet(Of SqlExceptionOccurrence)
            Get
                Return MyBase.EntityContainer.GetEntitySet(Of SqlExceptionOccurrence)
            End Get
        End Property
        
        ''' <summary>
        ''' Gets the set of <see cref="SqlExceptionResource"/> entity instances that have been loaded into this <see cref="SVDomainContext"/> instance.
        ''' </summary>
        Public ReadOnly Property SqlExceptionResources() As EntitySet(Of SqlExceptionResource)
            Get
                Return MyBase.EntityContainer.GetEntitySet(Of SqlExceptionResource)
            End Get
        End Property
        
        ''' <summary>
        ''' Gets the set of <see cref="SqlResource"/> entity instances that have been loaded into this <see cref="SVDomainContext"/> instance.
        ''' </summary>
        Public ReadOnly Property SqlResources() As EntitySet(Of SqlResource)
            Get
                Return MyBase.EntityContainer.GetEntitySet(Of SqlResource)
            End Get
        End Property
        
        ''' <summary>
        ''' Gets the set of <see cref="SqlResourceType"/> entity instances that have been loaded into this <see cref="SVDomainContext"/> instance.
        ''' </summary>
        Public ReadOnly Property SqlResourceTypes() As EntitySet(Of SqlResourceType)
            Get
                Return MyBase.EntityContainer.GetEntitySet(Of SqlResourceType)
            End Get
        End Property
        
        ''' <summary>
        ''' Gets the set of <see cref="TimeMarker"/> entity instances that have been loaded into this <see cref="SVDomainContext"/> instance.
        ''' </summary>
        Public ReadOnly Property TimeMarkers() As EntitySet(Of TimeMarker)
            Get
                Return MyBase.EntityContainer.GetEntitySet(Of TimeMarker)
            End Get
        End Property
        
        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="Category"/> entity instances using the 'GetCategories' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="Category"/> entity instances.</returns>
        Public Function GetCategoriesQuery() As EntityQuery(Of Category)
            Me.ValidateMethod("GetCategoriesQuery", Nothing)
            Return MyBase.CreateQuery(Of Category)("GetCategories", Nothing, false, true)
        End Function
        
        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="SqlAppointmentResource"/> entity instances using the 'GetSqlAppointmentResourcesByRange' query.
        ''' </summary>
        ''' <param name="start">The value for the 'start' parameter of the query.</param>
        ''' <param name="end">The value for the 'end' parameter of the query.</param>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="SqlAppointmentResource"/> entity instances.</returns>
        Public Function GetSqlAppointmentResourcesByRangeQuery(ByVal start As DateTime, ByVal [end] As DateTime) As EntityQuery(Of SqlAppointmentResource)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("start", start)
            parameters.Add("end", [end])
            Me.ValidateMethod("GetSqlAppointmentResourcesByRangeQuery", parameters)
            Return MyBase.CreateQuery(Of SqlAppointmentResource)("GetSqlAppointmentResourcesByRange", parameters, false, true)
        End Function
        
        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="SqlAppointment"/> entity instances using the 'GetSqlAppointmentsByRange' query.
        ''' </summary>
        ''' <param name="start">The value for the 'start' parameter of the query.</param>
        ''' <param name="end">The value for the 'end' parameter of the query.</param>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="SqlAppointment"/> entity instances.</returns>
        Public Function GetSqlAppointmentsByRangeQuery(ByVal start As DateTime, ByVal [end] As DateTime) As EntityQuery(Of SqlAppointment)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("start", start)
            parameters.Add("end", [end])
            Me.ValidateMethod("GetSqlAppointmentsByRangeQuery", parameters)
            Return MyBase.CreateQuery(Of SqlAppointment)("GetSqlAppointmentsByRange", parameters, false, true)
        End Function
        
        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="SqlExceptionAppointment"/> entity instances using the 'GetSqlExceptionAppointmentsByRange' query.
        ''' </summary>
        ''' <param name="start">The value for the 'start' parameter of the query.</param>
        ''' <param name="end">The value for the 'end' parameter of the query.</param>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="SqlExceptionAppointment"/> entity instances.</returns>
        Public Function GetSqlExceptionAppointmentsByRangeQuery(ByVal start As DateTime, ByVal [end] As DateTime) As EntityQuery(Of SqlExceptionAppointment)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("start", start)
            parameters.Add("end", [end])
            Me.ValidateMethod("GetSqlExceptionAppointmentsByRangeQuery", parameters)
            Return MyBase.CreateQuery(Of SqlExceptionAppointment)("GetSqlExceptionAppointmentsByRange", parameters, false, true)
        End Function
        
        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="SqlExceptionOccurrence"/> entity instances using the 'GetSqlExceptionOccurrencesByRange' query.
        ''' </summary>
        ''' <param name="start">The value for the 'start' parameter of the query.</param>
        ''' <param name="end">The value for the 'end' parameter of the query.</param>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="SqlExceptionOccurrence"/> entity instances.</returns>
        Public Function GetSqlExceptionOccurrencesByRangeQuery(ByVal start As DateTime, ByVal [end] As DateTime) As EntityQuery(Of SqlExceptionOccurrence)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("start", start)
            parameters.Add("end", [end])
            Me.ValidateMethod("GetSqlExceptionOccurrencesByRangeQuery", parameters)
            Return MyBase.CreateQuery(Of SqlExceptionOccurrence)("GetSqlExceptionOccurrencesByRange", parameters, false, true)
        End Function
        
        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="SqlExceptionResource"/> entity instances using the 'GetSqlExceptionResourcesByRange' query.
        ''' </summary>
        ''' <param name="start">The value for the 'start' parameter of the query.</param>
        ''' <param name="end">The value for the 'end' parameter of the query.</param>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="SqlExceptionResource"/> entity instances.</returns>
        Public Function GetSqlExceptionResourcesByRangeQuery(ByVal start As DateTime, ByVal [end] As DateTime) As EntityQuery(Of SqlExceptionResource)
            Dim parameters As Dictionary(Of String, Object) = New Dictionary(Of String, Object)()
            parameters.Add("start", start)
            parameters.Add("end", [end])
            Me.ValidateMethod("GetSqlExceptionResourcesByRangeQuery", parameters)
            Return MyBase.CreateQuery(Of SqlExceptionResource)("GetSqlExceptionResourcesByRange", parameters, false, true)
        End Function
        
        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="SqlResource"/> entity instances using the 'GetSqlResources' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="SqlResource"/> entity instances.</returns>
        Public Function GetSqlResourcesQuery() As EntityQuery(Of SqlResource)
            Me.ValidateMethod("GetSqlResourcesQuery", Nothing)
            Return MyBase.CreateQuery(Of SqlResource)("GetSqlResources", Nothing, false, true)
        End Function
        
        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="SqlResourceType"/> entity instances using the 'GetSqlResourceTypes' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="SqlResourceType"/> entity instances.</returns>
        Public Function GetSqlResourceTypesQuery() As EntityQuery(Of SqlResourceType)
            Me.ValidateMethod("GetSqlResourceTypesQuery", Nothing)
            Return MyBase.CreateQuery(Of SqlResourceType)("GetSqlResourceTypes", Nothing, false, true)
        End Function
        
        ''' <summary>
        ''' Gets an EntityQuery instance that can be used to load <see cref="TimeMarker"/> entity instances using the 'GetTimeMarkers' query.
        ''' </summary>
        ''' <returns>An EntityQuery that can be loaded to retrieve <see cref="TimeMarker"/> entity instances.</returns>
        Public Function GetTimeMarkersQuery() As EntityQuery(Of TimeMarker)
            Me.ValidateMethod("GetTimeMarkersQuery", Nothing)
            Return MyBase.CreateQuery(Of TimeMarker)("GetTimeMarkers", Nothing, false, true)
        End Function
        
        ''' <summary>
        ''' Creates a new EntityContainer for this DomainContext's EntitySets.
        ''' </summary>
        ''' <returns>A new container instance.</returns>
        Protected Overrides Function CreateEntityContainer() As EntityContainer
            Return New SVDomainContextEntityContainer()
        End Function
        
        ''' <summary>
        ''' Service contract for the 'SVDomainService' DomainService.
        ''' </summary>
        <ServiceContract()>  _
        Public Interface ISVDomainServiceContract
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetCategories' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <FaultContract(GetType(DomainServiceFault), Action:="http://tempuri.org/SVDomainService/GetCategoriesDomainServiceFault", Name:="DomainServiceFault", [Namespace]:="DomainServices"),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/SVDomainService/GetCategories", ReplyAction:="http://tempuri.org/SVDomainService/GetCategoriesResponse"),  _
             WebGet()>  _
            Function BeginGetCategories(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetCategories'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetCategories'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetCategories' operation.</returns>
            Function EndGetCategories(ByVal result As IAsyncResult) As QueryResult(Of Category)
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetSqlAppointmentResourcesByRange' operation.
            ''' </summary>
            ''' <param name="start">The value for the 'start' parameter of this action.</param>
            ''' <param name="end">The value for the 'end' parameter of this action.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <FaultContract(GetType(DomainServiceFault), Action:="http://tempuri.org/SVDomainService/GetSqlAppointmentResourcesByRangeDomainService"& _ 
                "Fault", Name:="DomainServiceFault", [Namespace]:="DomainServices"),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/SVDomainService/GetSqlAppointmentResourcesByRange", ReplyAction:="http://tempuri.org/SVDomainService/GetSqlAppointmentResourcesByRangeResponse"),  _
             WebGet()>  _
            Function BeginGetSqlAppointmentResourcesByRange(ByVal start As DateTime, ByVal [end] As DateTime, ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetSqlAppointmentResourcesByRange'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetSqlAppointmentResourcesByRange'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetSqlAppointmentResourcesByRange' operation.</returns>
            Function EndGetSqlAppointmentResourcesByRange(ByVal result As IAsyncResult) As QueryResult(Of SqlAppointmentResource)
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetSqlAppointmentsByRange' operation.
            ''' </summary>
            ''' <param name="start">The value for the 'start' parameter of this action.</param>
            ''' <param name="end">The value for the 'end' parameter of this action.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <FaultContract(GetType(DomainServiceFault), Action:="http://tempuri.org/SVDomainService/GetSqlAppointmentsByRangeDomainServiceFault", Name:="DomainServiceFault", [Namespace]:="DomainServices"),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/SVDomainService/GetSqlAppointmentsByRange", ReplyAction:="http://tempuri.org/SVDomainService/GetSqlAppointmentsByRangeResponse"),  _
             WebGet()>  _
            Function BeginGetSqlAppointmentsByRange(ByVal start As DateTime, ByVal [end] As DateTime, ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetSqlAppointmentsByRange'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetSqlAppointmentsByRange'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetSqlAppointmentsByRange' operation.</returns>
            Function EndGetSqlAppointmentsByRange(ByVal result As IAsyncResult) As QueryResult(Of SqlAppointment)
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetSqlExceptionAppointmentsByRange' operation.
            ''' </summary>
            ''' <param name="start">The value for the 'start' parameter of this action.</param>
            ''' <param name="end">The value for the 'end' parameter of this action.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <FaultContract(GetType(DomainServiceFault), Action:="http://tempuri.org/SVDomainService/GetSqlExceptionAppointmentsByRangeDomainServic"& _ 
                "eFault", Name:="DomainServiceFault", [Namespace]:="DomainServices"),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/SVDomainService/GetSqlExceptionAppointmentsByRange", ReplyAction:="http://tempuri.org/SVDomainService/GetSqlExceptionAppointmentsByRangeResponse"),  _
             WebGet()>  _
            Function BeginGetSqlExceptionAppointmentsByRange(ByVal start As DateTime, ByVal [end] As DateTime, ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetSqlExceptionAppointmentsByRange'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetSqlExceptionAppointmentsByRange'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetSqlExceptionAppointmentsByRange' operation.</returns>
            Function EndGetSqlExceptionAppointmentsByRange(ByVal result As IAsyncResult) As QueryResult(Of SqlExceptionAppointment)
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetSqlExceptionOccurrencesByRange' operation.
            ''' </summary>
            ''' <param name="start">The value for the 'start' parameter of this action.</param>
            ''' <param name="end">The value for the 'end' parameter of this action.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <FaultContract(GetType(DomainServiceFault), Action:="http://tempuri.org/SVDomainService/GetSqlExceptionOccurrencesByRangeDomainService"& _ 
                "Fault", Name:="DomainServiceFault", [Namespace]:="DomainServices"),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/SVDomainService/GetSqlExceptionOccurrencesByRange", ReplyAction:="http://tempuri.org/SVDomainService/GetSqlExceptionOccurrencesByRangeResponse"),  _
             WebGet()>  _
            Function BeginGetSqlExceptionOccurrencesByRange(ByVal start As DateTime, ByVal [end] As DateTime, ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetSqlExceptionOccurrencesByRange'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetSqlExceptionOccurrencesByRange'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetSqlExceptionOccurrencesByRange' operation.</returns>
            Function EndGetSqlExceptionOccurrencesByRange(ByVal result As IAsyncResult) As QueryResult(Of SqlExceptionOccurrence)
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetSqlExceptionResourcesByRange' operation.
            ''' </summary>
            ''' <param name="start">The value for the 'start' parameter of this action.</param>
            ''' <param name="end">The value for the 'end' parameter of this action.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <FaultContract(GetType(DomainServiceFault), Action:="http://tempuri.org/SVDomainService/GetSqlExceptionResourcesByRangeDomainServiceFa"& _ 
                "ult", Name:="DomainServiceFault", [Namespace]:="DomainServices"),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/SVDomainService/GetSqlExceptionResourcesByRange", ReplyAction:="http://tempuri.org/SVDomainService/GetSqlExceptionResourcesByRangeResponse"),  _
             WebGet()>  _
            Function BeginGetSqlExceptionResourcesByRange(ByVal start As DateTime, ByVal [end] As DateTime, ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetSqlExceptionResourcesByRange'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetSqlExceptionResourcesByRange'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetSqlExceptionResourcesByRange' operation.</returns>
            Function EndGetSqlExceptionResourcesByRange(ByVal result As IAsyncResult) As QueryResult(Of SqlExceptionResource)
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetSqlResources' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <FaultContract(GetType(DomainServiceFault), Action:="http://tempuri.org/SVDomainService/GetSqlResourcesDomainServiceFault", Name:="DomainServiceFault", [Namespace]:="DomainServices"),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/SVDomainService/GetSqlResources", ReplyAction:="http://tempuri.org/SVDomainService/GetSqlResourcesResponse"),  _
             WebGet()>  _
            Function BeginGetSqlResources(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetSqlResources'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetSqlResources'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetSqlResources' operation.</returns>
            Function EndGetSqlResources(ByVal result As IAsyncResult) As QueryResult(Of SqlResource)
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetSqlResourceTypes' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <FaultContract(GetType(DomainServiceFault), Action:="http://tempuri.org/SVDomainService/GetSqlResourceTypesDomainServiceFault", Name:="DomainServiceFault", [Namespace]:="DomainServices"),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/SVDomainService/GetSqlResourceTypes", ReplyAction:="http://tempuri.org/SVDomainService/GetSqlResourceTypesResponse"),  _
             WebGet()>  _
            Function BeginGetSqlResourceTypes(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetSqlResourceTypes'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetSqlResourceTypes'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetSqlResourceTypes' operation.</returns>
            Function EndGetSqlResourceTypes(ByVal result As IAsyncResult) As QueryResult(Of SqlResourceType)
            
            ''' <summary>
            ''' Asynchronously invokes the 'GetTimeMarkers' operation.
            ''' </summary>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <FaultContract(GetType(DomainServiceFault), Action:="http://tempuri.org/SVDomainService/GetTimeMarkersDomainServiceFault", Name:="DomainServiceFault", [Namespace]:="DomainServices"),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/SVDomainService/GetTimeMarkers", ReplyAction:="http://tempuri.org/SVDomainService/GetTimeMarkersResponse"),  _
             WebGet()>  _
            Function BeginGetTimeMarkers(ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginGetTimeMarkers'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginGetTimeMarkers'.</param>
            ''' <returns>The 'QueryResult' returned from the 'GetTimeMarkers' operation.</returns>
            Function EndGetTimeMarkers(ByVal result As IAsyncResult) As QueryResult(Of TimeMarker)
            
            ''' <summary>
            ''' Asynchronously invokes the 'SubmitChanges' operation.
            ''' </summary>
            ''' <param name="changeSet">The change-set to submit.</param>
            ''' <param name="callback">Callback to invoke on completion.</param>
            ''' <param name="asyncState">Optional state object.</param>
            ''' <returns>An IAsyncResult that can be used to monitor the request.</returns>
            <FaultContract(GetType(DomainServiceFault), Action:="http://tempuri.org/SVDomainService/SubmitChangesDomainServiceFault", Name:="DomainServiceFault", [Namespace]:="DomainServices"),  _
             OperationContract(AsyncPattern:=true, Action:="http://tempuri.org/SVDomainService/SubmitChanges", ReplyAction:="http://tempuri.org/SVDomainService/SubmitChangesResponse")>  _
            Function BeginSubmitChanges(ByVal changeSet As IEnumerable(Of ChangeSetEntry), ByVal callback As AsyncCallback, ByVal asyncState As Object) As IAsyncResult
            
            ''' <summary>
            ''' Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            ''' </summary>
            ''' <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            ''' <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            Function EndSubmitChanges(ByVal result As IAsyncResult) As IEnumerable(Of ChangeSetEntry)
        End Interface
        
        Friend NotInheritable Class SVDomainContextEntityContainer
            Inherits EntityContainer
            
            Public Sub New()
                MyBase.New
                Me.CreateEntitySet(Of Category)(EntitySetOperations.All)
                Me.CreateEntitySet(Of SqlAppointment)(EntitySetOperations.All)
                Me.CreateEntitySet(Of SqlAppointmentResource)(EntitySetOperations.All)
                Me.CreateEntitySet(Of SqlExceptionAppointment)(EntitySetOperations.All)
                Me.CreateEntitySet(Of SqlExceptionOccurrence)(EntitySetOperations.All)
                Me.CreateEntitySet(Of SqlExceptionResource)(EntitySetOperations.All)
                Me.CreateEntitySet(Of SqlResource)(EntitySetOperations.All)
                Me.CreateEntitySet(Of SqlResourceType)(EntitySetOperations.All)
                Me.CreateEntitySet(Of TimeMarker)(EntitySetOperations.All)
            End Sub
        End Class
    End Class
    
    ''' <summary>
    ''' The 'TimeMarker' entity class.
    ''' </summary>
    <DataContract([Namespace]:="http://schemas.datacontract.org/2004/07/ScheduleViewDB.Web")>  _
    Partial Public NotInheritable Class TimeMarker
        Inherits Entity
        
        Private _sqlAppointments As EntityCollection(Of SqlAppointment)
        
        Private _sqlExceptionAppointments As EntityCollection(Of SqlExceptionAppointment)
        
        Private _timeMarkerBrushName As String
        
        Private _timeMarkerName As String
        
        Private _timeMarkersId As Integer
        
        #Region "Extensibility Method Definitions"

        ''' <summary>
        ''' This method is invoked from the constructor once initialization is complete and
        ''' can be used for further object setup.
        ''' </summary>
        Private Partial Sub OnCreated()
        End Sub
        Private Partial Sub OnTimeMarkerBrushNameChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnTimeMarkerBrushNameChanged()
        End Sub
        Private Partial Sub OnTimeMarkerNameChanging(ByVal value As String)
        End Sub
        Private Partial Sub OnTimeMarkerNameChanged()
        End Sub
        Private Partial Sub OnTimeMarkersIdChanging(ByVal value As Integer)
        End Sub
        Private Partial Sub OnTimeMarkersIdChanged()
        End Sub

        #End Region
        
        
        ''' <summary>
        ''' Initializes a new instance of the <see cref="TimeMarker"/> class.
        ''' </summary>
        Public Sub New()
            MyBase.New
            Me.OnCreated
        End Sub
        
        ''' <summary>
        ''' Gets the collection of associated <see cref="SqlAppointment"/> entity instances.
        ''' </summary>
        <Association("TimeMarker_SqlAppointment", "TimeMarkersId", "TimeMarkerID"),  _
         XmlIgnore()>  _
        Public ReadOnly Property SqlAppointments() As EntityCollection(Of SqlAppointment)
            Get
                If (Me._sqlAppointments Is Nothing) Then
                    Me._sqlAppointments = New EntityCollection(Of SqlAppointment)(Me, "SqlAppointments", AddressOf Me.FilterSqlAppointments, AddressOf Me.AttachSqlAppointments, AddressOf Me.DetachSqlAppointments)
                End If
                Return Me._sqlAppointments
            End Get
        End Property
        
        ''' <summary>
        ''' Gets the collection of associated <see cref="SqlExceptionAppointment"/> entity instances.
        ''' </summary>
        <Association("TimeMarker_SqlExceptionAppointment", "TimeMarkersId", "TimeMarkerID"),  _
         XmlIgnore()>  _
        Public ReadOnly Property SqlExceptionAppointments() As EntityCollection(Of SqlExceptionAppointment)
            Get
                If (Me._sqlExceptionAppointments Is Nothing) Then
                    Me._sqlExceptionAppointments = New EntityCollection(Of SqlExceptionAppointment)(Me, "SqlExceptionAppointments", AddressOf Me.FilterSqlExceptionAppointments, AddressOf Me.AttachSqlExceptionAppointments, AddressOf Me.DetachSqlExceptionAppointments)
                End If
                Return Me._sqlExceptionAppointments
            End Get
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'TimeMarkerBrushName' value.
        ''' </summary>
        <DataMember(),  _
         StringLength(50)>  _
        Public Property TimeMarkerBrushName() As String
            Get
                Return Me._timeMarkerBrushName
            End Get
            Set
                If (String.Equals(Me._timeMarkerBrushName, value) = false) Then
                    Me.OnTimeMarkerBrushNameChanging(value)
                    Me.RaiseDataMemberChanging("TimeMarkerBrushName")
                    Me.ValidateProperty("TimeMarkerBrushName", value)
                    Me._timeMarkerBrushName = value
                    Me.RaiseDataMemberChanged("TimeMarkerBrushName")
                    Me.OnTimeMarkerBrushNameChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'TimeMarkerName' value.
        ''' </summary>
        <DataMember(),  _
         StringLength(50)>  _
        Public Property TimeMarkerName() As String
            Get
                Return Me._timeMarkerName
            End Get
            Set
                If (String.Equals(Me._timeMarkerName, value) = false) Then
                    Me.OnTimeMarkerNameChanging(value)
                    Me.RaiseDataMemberChanging("TimeMarkerName")
                    Me.ValidateProperty("TimeMarkerName", value)
                    Me._timeMarkerName = value
                    Me.RaiseDataMemberChanged("TimeMarkerName")
                    Me.OnTimeMarkerNameChanged
                End If
            End Set
        End Property
        
        ''' <summary>
        ''' Gets or sets the 'TimeMarkersId' value.
        ''' </summary>
        <DatabaseGenerated(DatabaseGeneratedOption.Identity),  _
         DataMember(),  _
         Editable(false, AllowInitialValue:=true),  _
         Key(),  _
         RoundtripOriginal()>  _
        Public Property TimeMarkersId() As Integer
            Get
                Return Me._timeMarkersId
            End Get
            Set
                If ((Me._timeMarkersId = value)  _
                            = false) Then
                    Me.OnTimeMarkersIdChanging(value)
                    Me.ValidateProperty("TimeMarkersId", value)
                    Me._timeMarkersId = value
                    Me.RaisePropertyChanged("TimeMarkersId")
                    Me.OnTimeMarkersIdChanged
                End If
            End Set
        End Property
        
        Private Sub AttachSqlAppointments(ByVal entity As SqlAppointment)
            entity.TimeMarker = Me
        End Sub
        
        Private Sub DetachSqlAppointments(ByVal entity As SqlAppointment)
            entity.TimeMarker = Nothing
        End Sub
        
        Private Function FilterSqlAppointments(ByVal entity As SqlAppointment) As Boolean
            Return Object.Equals(entity.TimeMarkerID, Me.TimeMarkersId)
        End Function
        
        Private Sub AttachSqlExceptionAppointments(ByVal entity As SqlExceptionAppointment)
            entity.TimeMarker = Me
        End Sub
        
        Private Sub DetachSqlExceptionAppointments(ByVal entity As SqlExceptionAppointment)
            entity.TimeMarker = Nothing
        End Sub
        
        Private Function FilterSqlExceptionAppointments(ByVal entity As SqlExceptionAppointment) As Boolean
            Return Object.Equals(entity.TimeMarkerID, Me.TimeMarkersId)
        End Function
        
        ''' <summary>
        ''' Computes a value from the key fields that uniquely identifies this entity instance.
        ''' </summary>
        ''' <returns>An object instance that uniquely identifies this entity instance.</returns>
        Public Overrides Function GetIdentity() As Object
            Return Me._timeMarkersId
        End Function
    End Class
End Namespace
