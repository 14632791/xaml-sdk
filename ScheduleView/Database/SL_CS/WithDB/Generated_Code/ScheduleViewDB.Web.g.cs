//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ScheduleViewDB
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
    }
}
namespace ScheduleViewDB.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// The 'Category' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ScheduleViewDB.Web")]
    public sealed partial class Category : Entity
    {
        
        private string _categoryBrushName;
        
        private int _categoryID;
        
        private string _categoryName;
        
        private string _displayName;
        
        private EntityCollection<SqlAppointment> _sqlAppointments;
        
        private EntityCollection<SqlExceptionAppointment> _sqlExceptionAppointments;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCategoryBrushNameChanging(string value);
        partial void OnCategoryBrushNameChanged();
        partial void OnCategoryIDChanging(int value);
        partial void OnCategoryIDChanged();
        partial void OnCategoryNameChanging(string value);
        partial void OnCategoryNameChanged();
        partial void OnDisplayNameChanging(string value);
        partial void OnDisplayNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Category"/> class.
        /// </summary>
        public Category()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CategoryBrushName' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string CategoryBrushName
        {
            get
            {
                return this._categoryBrushName;
            }
            set
            {
                if ((this._categoryBrushName != value))
                {
                    this.OnCategoryBrushNameChanging(value);
                    this.RaiseDataMemberChanging("CategoryBrushName");
                    this.ValidateProperty("CategoryBrushName", value);
                    this._categoryBrushName = value;
                    this.RaiseDataMemberChanged("CategoryBrushName");
                    this.OnCategoryBrushNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CategoryID' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int CategoryID
        {
            get
            {
                return this._categoryID;
            }
            set
            {
                if ((this._categoryID != value))
                {
                    this.OnCategoryIDChanging(value);
                    this.ValidateProperty("CategoryID", value);
                    this._categoryID = value;
                    this.RaisePropertyChanged("CategoryID");
                    this.OnCategoryIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CategoryName' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string CategoryName
        {
            get
            {
                return this._categoryName;
            }
            set
            {
                if ((this._categoryName != value))
                {
                    this.OnCategoryNameChanging(value);
                    this.RaiseDataMemberChanging("CategoryName");
                    this.ValidateProperty("CategoryName", value);
                    this._categoryName = value;
                    this.RaiseDataMemberChanged("CategoryName");
                    this.OnCategoryNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DisplayName' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string DisplayName
        {
            get
            {
                return this._displayName;
            }
            set
            {
                if ((this._displayName != value))
                {
                    this.OnDisplayNameChanging(value);
                    this.RaiseDataMemberChanging("DisplayName");
                    this.ValidateProperty("DisplayName", value);
                    this._displayName = value;
                    this.RaiseDataMemberChanged("DisplayName");
                    this.OnDisplayNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SqlAppointment"/> entity instances.
        /// </summary>
        [Association("Category_SqlAppointment", "CategoryID", "CategoryID")]
        [XmlIgnore()]
        public EntityCollection<SqlAppointment> SqlAppointments
        {
            get
            {
                if ((this._sqlAppointments == null))
                {
                    this._sqlAppointments = new EntityCollection<SqlAppointment>(this, "SqlAppointments", this.FilterSqlAppointments, this.AttachSqlAppointments, this.DetachSqlAppointments);
                }
                return this._sqlAppointments;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SqlExceptionAppointment"/> entity instances.
        /// </summary>
        [Association("Category_SqlExceptionAppointment", "CategoryID", "CategoryID")]
        [XmlIgnore()]
        public EntityCollection<SqlExceptionAppointment> SqlExceptionAppointments
        {
            get
            {
                if ((this._sqlExceptionAppointments == null))
                {
                    this._sqlExceptionAppointments = new EntityCollection<SqlExceptionAppointment>(this, "SqlExceptionAppointments", this.FilterSqlExceptionAppointments, this.AttachSqlExceptionAppointments, this.DetachSqlExceptionAppointments);
                }
                return this._sqlExceptionAppointments;
            }
        }
        
        private void AttachSqlAppointments(SqlAppointment entity)
        {
            entity.Category = this;
        }
        
        private void DetachSqlAppointments(SqlAppointment entity)
        {
            entity.Category = null;
        }
        
        private bool FilterSqlAppointments(SqlAppointment entity)
        {
            return (entity.CategoryID == this.CategoryID);
        }
        
        private void AttachSqlExceptionAppointments(SqlExceptionAppointment entity)
        {
            entity.Category = this;
        }
        
        private void DetachSqlExceptionAppointments(SqlExceptionAppointment entity)
        {
            entity.Category = null;
        }
        
        private bool FilterSqlExceptionAppointments(SqlExceptionAppointment entity)
        {
            return (entity.CategoryID == this.CategoryID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._categoryID;
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'ScheduleViewDomainService' DomainService.
    /// </summary>
    public sealed partial class ScheduleViewDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleViewDomainContext"/> class.
        /// </summary>
        public ScheduleViewDomainContext() : 
                this(new WebDomainClient<IScheduleViewDomainServiceContract>(new Uri("ScheduleViewDB-Web-ScheduleViewDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleViewDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The ScheduleViewDomainService service URI.</param>
        public ScheduleViewDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IScheduleViewDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleViewDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public ScheduleViewDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Category"/> entity instances that have been loaded into this <see cref="ScheduleViewDomainContext"/> instance.
        /// </summary>
        public EntitySet<Category> Categories
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Category>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SqlAppointmentResource"/> entity instances that have been loaded into this <see cref="ScheduleViewDomainContext"/> instance.
        /// </summary>
        public EntitySet<SqlAppointmentResource> SqlAppointmentResources
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SqlAppointmentResource>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SqlAppointment"/> entity instances that have been loaded into this <see cref="ScheduleViewDomainContext"/> instance.
        /// </summary>
        public EntitySet<SqlAppointment> SqlAppointments
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SqlAppointment>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SqlExceptionAppointment"/> entity instances that have been loaded into this <see cref="ScheduleViewDomainContext"/> instance.
        /// </summary>
        public EntitySet<SqlExceptionAppointment> SqlExceptionAppointments
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SqlExceptionAppointment>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SqlExceptionOccurrence"/> entity instances that have been loaded into this <see cref="ScheduleViewDomainContext"/> instance.
        /// </summary>
        public EntitySet<SqlExceptionOccurrence> SqlExceptionOccurrences
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SqlExceptionOccurrence>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SqlExceptionResource"/> entity instances that have been loaded into this <see cref="ScheduleViewDomainContext"/> instance.
        /// </summary>
        public EntitySet<SqlExceptionResource> SqlExceptionResources
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SqlExceptionResource>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SqlResource"/> entity instances that have been loaded into this <see cref="ScheduleViewDomainContext"/> instance.
        /// </summary>
        public EntitySet<SqlResource> SqlResources
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SqlResource>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SqlResourceType"/> entity instances that have been loaded into this <see cref="ScheduleViewDomainContext"/> instance.
        /// </summary>
        public EntitySet<SqlResourceType> SqlResourceTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SqlResourceType>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="TimeMarker"/> entity instances that have been loaded into this <see cref="ScheduleViewDomainContext"/> instance.
        /// </summary>
        public EntitySet<TimeMarker> TimeMarkers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<TimeMarker>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Category"/> entity instances using the 'GetCategories' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Category"/> entity instances.</returns>
        public EntityQuery<Category> GetCategoriesQuery()
        {
            this.ValidateMethod("GetCategoriesQuery", null);
            return base.CreateQuery<Category>("GetCategories", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SqlAppointmentResource"/> entity instances using the 'GetSqlAppointmentResourcesByRange' query.
        /// </summary>
        /// <param name="start">The value for the 'start' parameter of the query.</param>
        /// <param name="end">The value for the 'end' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SqlAppointmentResource"/> entity instances.</returns>
        public EntityQuery<SqlAppointmentResource> GetSqlAppointmentResourcesByRangeQuery(DateTime start, DateTime end)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("start", start);
            parameters.Add("end", end);
            this.ValidateMethod("GetSqlAppointmentResourcesByRangeQuery", parameters);
            return base.CreateQuery<SqlAppointmentResource>("GetSqlAppointmentResourcesByRange", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SqlAppointment"/> entity instances using the 'GetSqlAppointmentsByRange' query.
        /// </summary>
        /// <param name="start">The value for the 'start' parameter of the query.</param>
        /// <param name="end">The value for the 'end' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SqlAppointment"/> entity instances.</returns>
        public EntityQuery<SqlAppointment> GetSqlAppointmentsByRangeQuery(DateTime start, DateTime end)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("start", start);
            parameters.Add("end", end);
            this.ValidateMethod("GetSqlAppointmentsByRangeQuery", parameters);
            return base.CreateQuery<SqlAppointment>("GetSqlAppointmentsByRange", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SqlExceptionAppointment"/> entity instances using the 'GetSqlExceptionAppointmentsByRange' query.
        /// </summary>
        /// <param name="start">The value for the 'start' parameter of the query.</param>
        /// <param name="end">The value for the 'end' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SqlExceptionAppointment"/> entity instances.</returns>
        public EntityQuery<SqlExceptionAppointment> GetSqlExceptionAppointmentsByRangeQuery(DateTime start, DateTime end)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("start", start);
            parameters.Add("end", end);
            this.ValidateMethod("GetSqlExceptionAppointmentsByRangeQuery", parameters);
            return base.CreateQuery<SqlExceptionAppointment>("GetSqlExceptionAppointmentsByRange", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SqlExceptionOccurrence"/> entity instances using the 'GetSqlExceptionOccurrencesByRange' query.
        /// </summary>
        /// <param name="start">The value for the 'start' parameter of the query.</param>
        /// <param name="end">The value for the 'end' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SqlExceptionOccurrence"/> entity instances.</returns>
        public EntityQuery<SqlExceptionOccurrence> GetSqlExceptionOccurrencesByRangeQuery(DateTime start, DateTime end)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("start", start);
            parameters.Add("end", end);
            this.ValidateMethod("GetSqlExceptionOccurrencesByRangeQuery", parameters);
            return base.CreateQuery<SqlExceptionOccurrence>("GetSqlExceptionOccurrencesByRange", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SqlExceptionResource"/> entity instances using the 'GetSqlExceptionResourcesByRange' query.
        /// </summary>
        /// <param name="start">The value for the 'start' parameter of the query.</param>
        /// <param name="end">The value for the 'end' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SqlExceptionResource"/> entity instances.</returns>
        public EntityQuery<SqlExceptionResource> GetSqlExceptionResourcesByRangeQuery(DateTime start, DateTime end)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("start", start);
            parameters.Add("end", end);
            this.ValidateMethod("GetSqlExceptionResourcesByRangeQuery", parameters);
            return base.CreateQuery<SqlExceptionResource>("GetSqlExceptionResourcesByRange", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SqlResource"/> entity instances using the 'GetSqlResources' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SqlResource"/> entity instances.</returns>
        public EntityQuery<SqlResource> GetSqlResourcesQuery()
        {
            this.ValidateMethod("GetSqlResourcesQuery", null);
            return base.CreateQuery<SqlResource>("GetSqlResources", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SqlResourceType"/> entity instances using the 'GetSqlResourceTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SqlResourceType"/> entity instances.</returns>
        public EntityQuery<SqlResourceType> GetSqlResourceTypesQuery()
        {
            this.ValidateMethod("GetSqlResourceTypesQuery", null);
            return base.CreateQuery<SqlResourceType>("GetSqlResourceTypes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="TimeMarker"/> entity instances using the 'GetTimeMarkers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="TimeMarker"/> entity instances.</returns>
        public EntityQuery<TimeMarker> GetTimeMarkersQuery()
        {
            this.ValidateMethod("GetTimeMarkersQuery", null);
            return base.CreateQuery<TimeMarker>("GetTimeMarkers", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ScheduleViewDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'ScheduleViewDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IScheduleViewDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetCategories' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ScheduleViewDomainService/GetCategoriesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ScheduleViewDomainService/GetCategories", ReplyAction="http://tempuri.org/ScheduleViewDomainService/GetCategoriesResponse")]
            [WebGet()]
            IAsyncResult BeginGetCategories(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCategories'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCategories'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCategories' operation.</returns>
            QueryResult<Category> EndGetCategories(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSqlAppointmentResourcesByRange' operation.
            /// </summary>
            /// <param name="start">The value for the 'start' parameter of this action.</param>
            /// <param name="end">The value for the 'end' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ScheduleViewDomainService/GetSqlAppointmentResourcesByRangeDom" +
                "ainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ScheduleViewDomainService/GetSqlAppointmentResourcesByRange", ReplyAction="http://tempuri.org/ScheduleViewDomainService/GetSqlAppointmentResourcesByRangeRes" +
                "ponse")]
            [WebGet()]
            IAsyncResult BeginGetSqlAppointmentResourcesByRange(DateTime start, DateTime end, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSqlAppointmentResourcesByRange'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSqlAppointmentResourcesByRange'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSqlAppointmentResourcesByRange' operation.</returns>
            QueryResult<SqlAppointmentResource> EndGetSqlAppointmentResourcesByRange(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSqlAppointmentsByRange' operation.
            /// </summary>
            /// <param name="start">The value for the 'start' parameter of this action.</param>
            /// <param name="end">The value for the 'end' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ScheduleViewDomainService/GetSqlAppointmentsByRangeDomainServi" +
                "ceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ScheduleViewDomainService/GetSqlAppointmentsByRange", ReplyAction="http://tempuri.org/ScheduleViewDomainService/GetSqlAppointmentsByRangeResponse")]
            [WebGet()]
            IAsyncResult BeginGetSqlAppointmentsByRange(DateTime start, DateTime end, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSqlAppointmentsByRange'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSqlAppointmentsByRange'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSqlAppointmentsByRange' operation.</returns>
            QueryResult<SqlAppointment> EndGetSqlAppointmentsByRange(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSqlExceptionAppointmentsByRange' operation.
            /// </summary>
            /// <param name="start">The value for the 'start' parameter of this action.</param>
            /// <param name="end">The value for the 'end' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ScheduleViewDomainService/GetSqlExceptionAppointmentsByRangeDo" +
                "mainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ScheduleViewDomainService/GetSqlExceptionAppointmentsByRange", ReplyAction="http://tempuri.org/ScheduleViewDomainService/GetSqlExceptionAppointmentsByRangeRe" +
                "sponse")]
            [WebGet()]
            IAsyncResult BeginGetSqlExceptionAppointmentsByRange(DateTime start, DateTime end, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSqlExceptionAppointmentsByRange'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSqlExceptionAppointmentsByRange'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSqlExceptionAppointmentsByRange' operation.</returns>
            QueryResult<SqlExceptionAppointment> EndGetSqlExceptionAppointmentsByRange(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSqlExceptionOccurrencesByRange' operation.
            /// </summary>
            /// <param name="start">The value for the 'start' parameter of this action.</param>
            /// <param name="end">The value for the 'end' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ScheduleViewDomainService/GetSqlExceptionOccurrencesByRangeDom" +
                "ainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ScheduleViewDomainService/GetSqlExceptionOccurrencesByRange", ReplyAction="http://tempuri.org/ScheduleViewDomainService/GetSqlExceptionOccurrencesByRangeRes" +
                "ponse")]
            [WebGet()]
            IAsyncResult BeginGetSqlExceptionOccurrencesByRange(DateTime start, DateTime end, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSqlExceptionOccurrencesByRange'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSqlExceptionOccurrencesByRange'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSqlExceptionOccurrencesByRange' operation.</returns>
            QueryResult<SqlExceptionOccurrence> EndGetSqlExceptionOccurrencesByRange(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSqlExceptionResourcesByRange' operation.
            /// </summary>
            /// <param name="start">The value for the 'start' parameter of this action.</param>
            /// <param name="end">The value for the 'end' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ScheduleViewDomainService/GetSqlExceptionResourcesByRangeDomai" +
                "nServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ScheduleViewDomainService/GetSqlExceptionResourcesByRange", ReplyAction="http://tempuri.org/ScheduleViewDomainService/GetSqlExceptionResourcesByRangeRespo" +
                "nse")]
            [WebGet()]
            IAsyncResult BeginGetSqlExceptionResourcesByRange(DateTime start, DateTime end, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSqlExceptionResourcesByRange'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSqlExceptionResourcesByRange'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSqlExceptionResourcesByRange' operation.</returns>
            QueryResult<SqlExceptionResource> EndGetSqlExceptionResourcesByRange(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSqlResources' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ScheduleViewDomainService/GetSqlResourcesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ScheduleViewDomainService/GetSqlResources", ReplyAction="http://tempuri.org/ScheduleViewDomainService/GetSqlResourcesResponse")]
            [WebGet()]
            IAsyncResult BeginGetSqlResources(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSqlResources'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSqlResources'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSqlResources' operation.</returns>
            QueryResult<SqlResource> EndGetSqlResources(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSqlResourceTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ScheduleViewDomainService/GetSqlResourceTypesDomainServiceFaul" +
                "t", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ScheduleViewDomainService/GetSqlResourceTypes", ReplyAction="http://tempuri.org/ScheduleViewDomainService/GetSqlResourceTypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetSqlResourceTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSqlResourceTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSqlResourceTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSqlResourceTypes' operation.</returns>
            QueryResult<SqlResourceType> EndGetSqlResourceTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTimeMarkers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ScheduleViewDomainService/GetTimeMarkersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ScheduleViewDomainService/GetTimeMarkers", ReplyAction="http://tempuri.org/ScheduleViewDomainService/GetTimeMarkersResponse")]
            [WebGet()]
            IAsyncResult BeginGetTimeMarkers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTimeMarkers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTimeMarkers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTimeMarkers' operation.</returns>
            QueryResult<TimeMarker> EndGetTimeMarkers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ScheduleViewDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ScheduleViewDomainService/SubmitChanges", ReplyAction="http://tempuri.org/ScheduleViewDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class ScheduleViewDomainContextEntityContainer : EntityContainer
        {
            
            public ScheduleViewDomainContextEntityContainer()
            {
                this.CreateEntitySet<Category>(EntitySetOperations.All);
                this.CreateEntitySet<SqlAppointment>(EntitySetOperations.All);
                this.CreateEntitySet<SqlAppointmentResource>(EntitySetOperations.All);
                this.CreateEntitySet<SqlExceptionAppointment>(EntitySetOperations.All);
                this.CreateEntitySet<SqlExceptionOccurrence>(EntitySetOperations.All);
                this.CreateEntitySet<SqlExceptionResource>(EntitySetOperations.All);
                this.CreateEntitySet<SqlResource>(EntitySetOperations.All);
                this.CreateEntitySet<SqlResourceType>(EntitySetOperations.All);
                this.CreateEntitySet<TimeMarker>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The 'SqlAppointment' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ScheduleViewDB.Web")]
    public sealed partial class SqlAppointment : Entity
    {
        
        private string _body;
        
        private EntityRef<Category> _category;
        
        private Nullable<int> _categoryID;
        
        private DateTime _end;
        
        private int _importance;
        
        private bool _isAllDayEvent;
        
        private string _recurrencePattern;
        
        private int _sqlAppointmentId;
        
        private EntityCollection<SqlAppointmentResource> _sqlAppointmentResources;
        
        private EntityCollection<SqlExceptionOccurrence> _sqlExceptionOccurrences;
        
        private DateTime _start;
        
        private string _subject;
        
        private EntityRef<TimeMarker> _timeMarker;
        
        private Nullable<int> _timeMarkerID;
        
        private string _timeZoneString;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBodyChanging(string value);
        partial void OnBodyChanged();
        partial void OnCategoryIDChanging(Nullable<int> value);
        partial void OnCategoryIDChanged();
        partial void OnEndChanging(DateTime value);
        partial void OnEndChanged();
        partial void OnImportanceChanging(int value);
        partial void OnImportanceChanged();
        partial void OnIsAllDayEventChanging(bool value);
        partial void OnIsAllDayEventChanged();
        partial void OnRecurrencePatternChanging(string value);
        partial void OnRecurrencePatternChanged();
        partial void OnSqlAppointmentIdChanging(int value);
        partial void OnSqlAppointmentIdChanged();
        partial void OnStartChanging(DateTime value);
        partial void OnStartChanged();
        partial void OnSubjectChanging(string value);
        partial void OnSubjectChanged();
        partial void OnTimeMarkerIDChanging(Nullable<int> value);
        partial void OnTimeMarkerIDChanged();
        partial void OnTimeZoneStringChanging(string value);
        partial void OnTimeZoneStringChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SqlAppointment"/> class.
        /// </summary>
        public SqlAppointment()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Body' value.
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string Body
        {
            get
            {
                return this._body;
            }
            set
            {
                if ((this._body != value))
                {
                    this.OnBodyChanging(value);
                    this.RaiseDataMemberChanging("Body");
                    this.ValidateProperty("Body", value);
                    this._body = value;
                    this.RaiseDataMemberChanged("Body");
                    this.OnBodyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Category"/> entity.
        /// </summary>
        [Association("Category_SqlAppointment", "CategoryID", "CategoryID", IsForeignKey=true)]
        [XmlIgnore()]
        public Category Category
        {
            get
            {
                if ((this._category == null))
                {
                    this._category = new EntityRef<Category>(this, "Category", this.FilterCategory);
                }
                return this._category.Entity;
            }
            set
            {
                Category previous = this.Category;
                if ((previous != value))
                {
                    this.ValidateProperty("Category", value);
                    if ((previous != null))
                    {
                        this._category.Entity = null;
                        previous.SqlAppointments.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CategoryID = value.CategoryID;
                    }
                    else
                    {
                        this.CategoryID = default(Nullable<int>);
                    }
                    this._category.Entity = value;
                    if ((value != null))
                    {
                        value.SqlAppointments.Add(this);
                    }
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CategoryID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> CategoryID
        {
            get
            {
                return this._categoryID;
            }
            set
            {
                if ((this._categoryID != value))
                {
                    this.OnCategoryIDChanging(value);
                    this.RaiseDataMemberChanging("CategoryID");
                    this.ValidateProperty("CategoryID", value);
                    this._categoryID = value;
                    this.RaiseDataMemberChanged("CategoryID");
                    this.OnCategoryIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'End' value.
        /// </summary>
        [DataMember()]
        public DateTime End
        {
            get
            {
                return this._end;
            }
            set
            {
                if ((this._end != value))
                {
                    this.OnEndChanging(value);
                    this.RaiseDataMemberChanging("End");
                    this.ValidateProperty("End", value);
                    this._end = value;
                    this.RaiseDataMemberChanged("End");
                    this.OnEndChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Importance' value.
        /// </summary>
        [DataMember()]
        public int Importance
        {
            get
            {
                return this._importance;
            }
            set
            {
                if ((this._importance != value))
                {
                    this.OnImportanceChanging(value);
                    this.RaiseDataMemberChanging("Importance");
                    this.ValidateProperty("Importance", value);
                    this._importance = value;
                    this.RaiseDataMemberChanged("Importance");
                    this.OnImportanceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsAllDayEvent' value.
        /// </summary>
        [DataMember()]
        public bool IsAllDayEvent
        {
            get
            {
                return this._isAllDayEvent;
            }
            set
            {
                if ((this._isAllDayEvent != value))
                {
                    this.OnIsAllDayEventChanging(value);
                    this.RaiseDataMemberChanging("IsAllDayEvent");
                    this.ValidateProperty("IsAllDayEvent", value);
                    this._isAllDayEvent = value;
                    this.RaiseDataMemberChanged("IsAllDayEvent");
                    this.OnIsAllDayEventChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecurrencePattern' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string RecurrencePattern
        {
            get
            {
                return this._recurrencePattern;
            }
            set
            {
                if ((this._recurrencePattern != value))
                {
                    this.OnRecurrencePatternChanging(value);
                    this.RaiseDataMemberChanging("RecurrencePattern");
                    this.ValidateProperty("RecurrencePattern", value);
                    this._recurrencePattern = value;
                    this.RaiseDataMemberChanged("RecurrencePattern");
                    this.OnRecurrencePatternChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SqlAppointmentId' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int SqlAppointmentId
        {
            get
            {
                return this._sqlAppointmentId;
            }
            set
            {
                if ((this._sqlAppointmentId != value))
                {
                    this.OnSqlAppointmentIdChanging(value);
                    this.ValidateProperty("SqlAppointmentId", value);
                    this._sqlAppointmentId = value;
                    this.RaisePropertyChanged("SqlAppointmentId");
                    this.OnSqlAppointmentIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SqlAppointmentResource"/> entity instances.
        /// </summary>
        [Association("SqlAppointment_SqlAppointmentResource", "SqlAppointmentId", "SqlAppointments_SqlAppointmentId")]
        [XmlIgnore()]
        public EntityCollection<SqlAppointmentResource> SqlAppointmentResources
        {
            get
            {
                if ((this._sqlAppointmentResources == null))
                {
                    this._sqlAppointmentResources = new EntityCollection<SqlAppointmentResource>(this, "SqlAppointmentResources", this.FilterSqlAppointmentResources, this.AttachSqlAppointmentResources, this.DetachSqlAppointmentResources);
                }
                return this._sqlAppointmentResources;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SqlExceptionOccurrence"/> entity instances.
        /// </summary>
        [Association("SqlAppointment_SqlExceptionOccurrence", "SqlAppointmentId", "MasterSqlAppointmentId")]
        [XmlIgnore()]
        public EntityCollection<SqlExceptionOccurrence> SqlExceptionOccurrences
        {
            get
            {
                if ((this._sqlExceptionOccurrences == null))
                {
                    this._sqlExceptionOccurrences = new EntityCollection<SqlExceptionOccurrence>(this, "SqlExceptionOccurrences", this.FilterSqlExceptionOccurrences, this.AttachSqlExceptionOccurrences, this.DetachSqlExceptionOccurrences);
                }
                return this._sqlExceptionOccurrences;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Start' value.
        /// </summary>
        [DataMember()]
        public DateTime Start
        {
            get
            {
                return this._start;
            }
            set
            {
                if ((this._start != value))
                {
                    this.OnStartChanging(value);
                    this.RaiseDataMemberChanging("Start");
                    this.ValidateProperty("Start", value);
                    this._start = value;
                    this.RaiseDataMemberChanged("Start");
                    this.OnStartChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Subject' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Subject
        {
            get
            {
                return this._subject;
            }
            set
            {
                if ((this._subject != value))
                {
                    this.OnSubjectChanging(value);
                    this.RaiseDataMemberChanging("Subject");
                    this.ValidateProperty("Subject", value);
                    this._subject = value;
                    this.RaiseDataMemberChanged("Subject");
                    this.OnSubjectChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="TimeMarker"/> entity.
        /// </summary>
        [Association("TimeMarker_SqlAppointment", "TimeMarkerID", "TimeMarkersId", IsForeignKey=true)]
        [XmlIgnore()]
        public TimeMarker TimeMarker
        {
            get
            {
                if ((this._timeMarker == null))
                {
                    this._timeMarker = new EntityRef<TimeMarker>(this, "TimeMarker", this.FilterTimeMarker);
                }
                return this._timeMarker.Entity;
            }
            set
            {
                TimeMarker previous = this.TimeMarker;
                if ((previous != value))
                {
                    this.ValidateProperty("TimeMarker", value);
                    if ((previous != null))
                    {
                        this._timeMarker.Entity = null;
                        previous.SqlAppointments.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.TimeMarkerID = value.TimeMarkersId;
                    }
                    else
                    {
                        this.TimeMarkerID = default(Nullable<int>);
                    }
                    this._timeMarker.Entity = value;
                    if ((value != null))
                    {
                        value.SqlAppointments.Add(this);
                    }
                    this.RaisePropertyChanged("TimeMarker");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TimeMarkerID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> TimeMarkerID
        {
            get
            {
                return this._timeMarkerID;
            }
            set
            {
                if ((this._timeMarkerID != value))
                {
                    this.OnTimeMarkerIDChanging(value);
                    this.RaiseDataMemberChanging("TimeMarkerID");
                    this.ValidateProperty("TimeMarkerID", value);
                    this._timeMarkerID = value;
                    this.RaiseDataMemberChanged("TimeMarkerID");
                    this.OnTimeMarkerIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TimeZoneString' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string TimeZoneString
        {
            get
            {
                return this._timeZoneString;
            }
            set
            {
                if ((this._timeZoneString != value))
                {
                    this.OnTimeZoneStringChanging(value);
                    this.RaiseDataMemberChanging("TimeZoneString");
                    this.ValidateProperty("TimeZoneString", value);
                    this._timeZoneString = value;
                    this.RaiseDataMemberChanged("TimeZoneString");
                    this.OnTimeZoneStringChanged();
                }
            }
        }
        
        private bool FilterCategory(Category entity)
        {
            return (entity.CategoryID == this.CategoryID);
        }
        
        private void AttachSqlAppointmentResources(SqlAppointmentResource entity)
        {
            entity.SqlAppointment = this;
        }
        
        private void DetachSqlAppointmentResources(SqlAppointmentResource entity)
        {
            entity.SqlAppointment = null;
        }
        
        private bool FilterSqlAppointmentResources(SqlAppointmentResource entity)
        {
            return (entity.SqlAppointments_SqlAppointmentId == this.SqlAppointmentId);
        }
        
        private void AttachSqlExceptionOccurrences(SqlExceptionOccurrence entity)
        {
            entity.SqlAppointment = this;
        }
        
        private void DetachSqlExceptionOccurrences(SqlExceptionOccurrence entity)
        {
            entity.SqlAppointment = null;
        }
        
        private bool FilterSqlExceptionOccurrences(SqlExceptionOccurrence entity)
        {
            return (entity.MasterSqlAppointmentId == this.SqlAppointmentId);
        }
        
        private bool FilterTimeMarker(TimeMarker entity)
        {
            return (entity.TimeMarkersId == this.TimeMarkerID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._sqlAppointmentId;
        }
    }
    
    /// <summary>
    /// The 'SqlAppointmentResource' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ScheduleViewDB.Web")]
    public sealed partial class SqlAppointmentResource : Entity
    {
        
        private Nullable<bool> _manyToManyWorkaround;
        
        private EntityRef<SqlAppointment> _sqlAppointment;
        
        private int _sqlAppointments_SqlAppointmentId;
        
        private EntityRef<SqlResource> _sqlResource;
        
        private int _sqlResources_SqlResourceId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnManyToManyWorkaroundChanging(Nullable<bool> value);
        partial void OnManyToManyWorkaroundChanged();
        partial void OnSqlAppointments_SqlAppointmentIdChanging(int value);
        partial void OnSqlAppointments_SqlAppointmentIdChanged();
        partial void OnSqlResources_SqlResourceIdChanging(int value);
        partial void OnSqlResources_SqlResourceIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SqlAppointmentResource"/> class.
        /// </summary>
        public SqlAppointmentResource()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ManyToManyWorkaround' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> ManyToManyWorkaround
        {
            get
            {
                return this._manyToManyWorkaround;
            }
            set
            {
                if ((this._manyToManyWorkaround != value))
                {
                    this.OnManyToManyWorkaroundChanging(value);
                    this.RaiseDataMemberChanging("ManyToManyWorkaround");
                    this.ValidateProperty("ManyToManyWorkaround", value);
                    this._manyToManyWorkaround = value;
                    this.RaiseDataMemberChanged("ManyToManyWorkaround");
                    this.OnManyToManyWorkaroundChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SqlAppointment"/> entity.
        /// </summary>
        [Association("SqlAppointment_SqlAppointmentResource", "SqlAppointments_SqlAppointmentId", "SqlAppointmentId", IsForeignKey=true)]
        [XmlIgnore()]
        public SqlAppointment SqlAppointment
        {
            get
            {
                if ((this._sqlAppointment == null))
                {
                    this._sqlAppointment = new EntityRef<SqlAppointment>(this, "SqlAppointment", this.FilterSqlAppointment);
                }
                return this._sqlAppointment.Entity;
            }
            set
            {
                SqlAppointment previous = this.SqlAppointment;
                if ((previous != value))
                {
                    this.ValidateProperty("SqlAppointment", value);
                    if ((previous != null))
                    {
                        this._sqlAppointment.Entity = null;
                        previous.SqlAppointmentResources.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SqlAppointments_SqlAppointmentId = value.SqlAppointmentId;
                    }
                    else
                    {
                        this.SqlAppointments_SqlAppointmentId = default(int);
                    }
                    this._sqlAppointment.Entity = value;
                    if ((value != null))
                    {
                        value.SqlAppointmentResources.Add(this);
                    }
                    this.RaisePropertyChanged("SqlAppointment");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SqlAppointments_SqlAppointmentId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int SqlAppointments_SqlAppointmentId
        {
            get
            {
                return this._sqlAppointments_SqlAppointmentId;
            }
            set
            {
                if ((this._sqlAppointments_SqlAppointmentId != value))
                {
                    this.OnSqlAppointments_SqlAppointmentIdChanging(value);
                    this.RaiseDataMemberChanging("SqlAppointments_SqlAppointmentId");
                    this.ValidateProperty("SqlAppointments_SqlAppointmentId", value);
                    this._sqlAppointments_SqlAppointmentId = value;
                    this.RaiseDataMemberChanged("SqlAppointments_SqlAppointmentId");
                    this.OnSqlAppointments_SqlAppointmentIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SqlResource"/> entity.
        /// </summary>
        [Association("SqlResource_SqlAppointmentResource", "SqlResources_SqlResourceId", "SqlResourceId", IsForeignKey=true)]
        [XmlIgnore()]
        public SqlResource SqlResource
        {
            get
            {
                if ((this._sqlResource == null))
                {
                    this._sqlResource = new EntityRef<SqlResource>(this, "SqlResource", this.FilterSqlResource);
                }
                return this._sqlResource.Entity;
            }
            set
            {
                SqlResource previous = this.SqlResource;
                if ((previous != value))
                {
                    this.ValidateProperty("SqlResource", value);
                    if ((previous != null))
                    {
                        this._sqlResource.Entity = null;
                        previous.SqlAppointmentResources.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SqlResources_SqlResourceId = value.SqlResourceId;
                    }
                    else
                    {
                        this.SqlResources_SqlResourceId = default(int);
                    }
                    this._sqlResource.Entity = value;
                    if ((value != null))
                    {
                        value.SqlAppointmentResources.Add(this);
                    }
                    this.RaisePropertyChanged("SqlResource");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SqlResources_SqlResourceId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int SqlResources_SqlResourceId
        {
            get
            {
                return this._sqlResources_SqlResourceId;
            }
            set
            {
                if ((this._sqlResources_SqlResourceId != value))
                {
                    this.OnSqlResources_SqlResourceIdChanging(value);
                    this.RaiseDataMemberChanging("SqlResources_SqlResourceId");
                    this.ValidateProperty("SqlResources_SqlResourceId", value);
                    this._sqlResources_SqlResourceId = value;
                    this.RaiseDataMemberChanged("SqlResources_SqlResourceId");
                    this.OnSqlResources_SqlResourceIdChanged();
                }
            }
        }
        
        private bool FilterSqlAppointment(SqlAppointment entity)
        {
            return (entity.SqlAppointmentId == this.SqlAppointments_SqlAppointmentId);
        }
        
        private bool FilterSqlResource(SqlResource entity)
        {
            return (entity.SqlResourceId == this.SqlResources_SqlResourceId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._sqlAppointments_SqlAppointmentId, this._sqlResources_SqlResourceId);
        }
    }
    
    /// <summary>
    /// The 'SqlExceptionAppointment' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ScheduleViewDB.Web")]
    public sealed partial class SqlExceptionAppointment : Entity
    {
        
        private string _body;
        
        private EntityRef<Category> _category;
        
        private Nullable<int> _categoryID;
        
        private DateTime _end;
        
        private int _exceptionId;
        
        private int _importance;
        
        private bool _isAllDayEvent;
        
        private EntityRef<SqlExceptionOccurrence> _sqlExceptionOccurrence;
        
        private EntityCollection<SqlExceptionResource> _sqlExceptionResources;
        
        private DateTime _start;
        
        private string _subject;
        
        private EntityRef<TimeMarker> _timeMarker;
        
        private Nullable<int> _timeMarkerID;
        
        private string _timeZoneString;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBodyChanging(string value);
        partial void OnBodyChanged();
        partial void OnCategoryIDChanging(Nullable<int> value);
        partial void OnCategoryIDChanged();
        partial void OnEndChanging(DateTime value);
        partial void OnEndChanged();
        partial void OnExceptionIdChanging(int value);
        partial void OnExceptionIdChanged();
        partial void OnImportanceChanging(int value);
        partial void OnImportanceChanged();
        partial void OnIsAllDayEventChanging(bool value);
        partial void OnIsAllDayEventChanged();
        partial void OnStartChanging(DateTime value);
        partial void OnStartChanged();
        partial void OnSubjectChanging(string value);
        partial void OnSubjectChanged();
        partial void OnTimeMarkerIDChanging(Nullable<int> value);
        partial void OnTimeMarkerIDChanged();
        partial void OnTimeZoneStringChanging(string value);
        partial void OnTimeZoneStringChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SqlExceptionAppointment"/> class.
        /// </summary>
        public SqlExceptionAppointment()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Body' value.
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string Body
        {
            get
            {
                return this._body;
            }
            set
            {
                if ((this._body != value))
                {
                    this.OnBodyChanging(value);
                    this.RaiseDataMemberChanging("Body");
                    this.ValidateProperty("Body", value);
                    this._body = value;
                    this.RaiseDataMemberChanged("Body");
                    this.OnBodyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Category"/> entity.
        /// </summary>
        [Association("Category_SqlExceptionAppointment", "CategoryID", "CategoryID", IsForeignKey=true)]
        [XmlIgnore()]
        public Category Category
        {
            get
            {
                if ((this._category == null))
                {
                    this._category = new EntityRef<Category>(this, "Category", this.FilterCategory);
                }
                return this._category.Entity;
            }
            set
            {
                Category previous = this.Category;
                if ((previous != value))
                {
                    this.ValidateProperty("Category", value);
                    if ((previous != null))
                    {
                        this._category.Entity = null;
                        previous.SqlExceptionAppointments.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CategoryID = value.CategoryID;
                    }
                    else
                    {
                        this.CategoryID = default(Nullable<int>);
                    }
                    this._category.Entity = value;
                    if ((value != null))
                    {
                        value.SqlExceptionAppointments.Add(this);
                    }
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CategoryID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> CategoryID
        {
            get
            {
                return this._categoryID;
            }
            set
            {
                if ((this._categoryID != value))
                {
                    this.OnCategoryIDChanging(value);
                    this.RaiseDataMemberChanging("CategoryID");
                    this.ValidateProperty("CategoryID", value);
                    this._categoryID = value;
                    this.RaiseDataMemberChanged("CategoryID");
                    this.OnCategoryIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'End' value.
        /// </summary>
        [DataMember()]
        public DateTime End
        {
            get
            {
                return this._end;
            }
            set
            {
                if ((this._end != value))
                {
                    this.OnEndChanging(value);
                    this.RaiseDataMemberChanging("End");
                    this.ValidateProperty("End", value);
                    this._end = value;
                    this.RaiseDataMemberChanged("End");
                    this.OnEndChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExceptionId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int ExceptionId
        {
            get
            {
                return this._exceptionId;
            }
            set
            {
                if ((this._exceptionId != value))
                {
                    this.OnExceptionIdChanging(value);
                    this.RaiseDataMemberChanging("ExceptionId");
                    this.ValidateProperty("ExceptionId", value);
                    this._exceptionId = value;
                    this.RaiseDataMemberChanged("ExceptionId");
                    this.OnExceptionIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Importance' value.
        /// </summary>
        [DataMember()]
        public int Importance
        {
            get
            {
                return this._importance;
            }
            set
            {
                if ((this._importance != value))
                {
                    this.OnImportanceChanging(value);
                    this.RaiseDataMemberChanging("Importance");
                    this.ValidateProperty("Importance", value);
                    this._importance = value;
                    this.RaiseDataMemberChanged("Importance");
                    this.OnImportanceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsAllDayEvent' value.
        /// </summary>
        [DataMember()]
        public bool IsAllDayEvent
        {
            get
            {
                return this._isAllDayEvent;
            }
            set
            {
                if ((this._isAllDayEvent != value))
                {
                    this.OnIsAllDayEventChanging(value);
                    this.RaiseDataMemberChanging("IsAllDayEvent");
                    this.ValidateProperty("IsAllDayEvent", value);
                    this._isAllDayEvent = value;
                    this.RaiseDataMemberChanged("IsAllDayEvent");
                    this.OnIsAllDayEventChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SqlExceptionOccurrence"/> entity.
        /// </summary>
        [Association("SqlExceptionOccurrence_SqlExceptionAppointment", "ExceptionId", "ExceptionId", IsForeignKey=true)]
        [XmlIgnore()]
        public SqlExceptionOccurrence SqlExceptionOccurrence
        {
            get
            {
                if ((this._sqlExceptionOccurrence == null))
                {
                    this._sqlExceptionOccurrence = new EntityRef<SqlExceptionOccurrence>(this, "SqlExceptionOccurrence", this.FilterSqlExceptionOccurrence);
                }
                return this._sqlExceptionOccurrence.Entity;
            }
            set
            {
                SqlExceptionOccurrence previous = this.SqlExceptionOccurrence;
                if ((previous != value))
                {
                    this.ValidateProperty("SqlExceptionOccurrence", value);
                    if ((previous != null))
                    {
                        this._sqlExceptionOccurrence.Entity = null;
                        previous.SqlExceptionAppointment = null;
                    }
                    if ((value != null))
                    {
                        this.ExceptionId = value.ExceptionId;
                    }
                    else
                    {
                        this.ExceptionId = default(int);
                    }
                    this._sqlExceptionOccurrence.Entity = value;
                    if ((value != null))
                    {
                        value.SqlExceptionAppointment = this;
                    }
                    this.RaisePropertyChanged("SqlExceptionOccurrence");
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SqlExceptionResource"/> entity instances.
        /// </summary>
        [Association("SqlExceptionAppointment_SqlExceptionResource", "ExceptionId", "SqlExceptionAppointments_ExceptionId")]
        [XmlIgnore()]
        public EntityCollection<SqlExceptionResource> SqlExceptionResources
        {
            get
            {
                if ((this._sqlExceptionResources == null))
                {
                    this._sqlExceptionResources = new EntityCollection<SqlExceptionResource>(this, "SqlExceptionResources", this.FilterSqlExceptionResources, this.AttachSqlExceptionResources, this.DetachSqlExceptionResources);
                }
                return this._sqlExceptionResources;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Start' value.
        /// </summary>
        [DataMember()]
        public DateTime Start
        {
            get
            {
                return this._start;
            }
            set
            {
                if ((this._start != value))
                {
                    this.OnStartChanging(value);
                    this.RaiseDataMemberChanging("Start");
                    this.ValidateProperty("Start", value);
                    this._start = value;
                    this.RaiseDataMemberChanged("Start");
                    this.OnStartChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Subject' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Subject
        {
            get
            {
                return this._subject;
            }
            set
            {
                if ((this._subject != value))
                {
                    this.OnSubjectChanging(value);
                    this.RaiseDataMemberChanging("Subject");
                    this.ValidateProperty("Subject", value);
                    this._subject = value;
                    this.RaiseDataMemberChanged("Subject");
                    this.OnSubjectChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="TimeMarker"/> entity.
        /// </summary>
        [Association("TimeMarker_SqlExceptionAppointment", "TimeMarkerID", "TimeMarkersId", IsForeignKey=true)]
        [XmlIgnore()]
        public TimeMarker TimeMarker
        {
            get
            {
                if ((this._timeMarker == null))
                {
                    this._timeMarker = new EntityRef<TimeMarker>(this, "TimeMarker", this.FilterTimeMarker);
                }
                return this._timeMarker.Entity;
            }
            set
            {
                TimeMarker previous = this.TimeMarker;
                if ((previous != value))
                {
                    this.ValidateProperty("TimeMarker", value);
                    if ((previous != null))
                    {
                        this._timeMarker.Entity = null;
                        previous.SqlExceptionAppointments.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.TimeMarkerID = value.TimeMarkersId;
                    }
                    else
                    {
                        this.TimeMarkerID = default(Nullable<int>);
                    }
                    this._timeMarker.Entity = value;
                    if ((value != null))
                    {
                        value.SqlExceptionAppointments.Add(this);
                    }
                    this.RaisePropertyChanged("TimeMarker");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TimeMarkerID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> TimeMarkerID
        {
            get
            {
                return this._timeMarkerID;
            }
            set
            {
                if ((this._timeMarkerID != value))
                {
                    this.OnTimeMarkerIDChanging(value);
                    this.RaiseDataMemberChanging("TimeMarkerID");
                    this.ValidateProperty("TimeMarkerID", value);
                    this._timeMarkerID = value;
                    this.RaiseDataMemberChanged("TimeMarkerID");
                    this.OnTimeMarkerIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TimeZoneString' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string TimeZoneString
        {
            get
            {
                return this._timeZoneString;
            }
            set
            {
                if ((this._timeZoneString != value))
                {
                    this.OnTimeZoneStringChanging(value);
                    this.RaiseDataMemberChanging("TimeZoneString");
                    this.ValidateProperty("TimeZoneString", value);
                    this._timeZoneString = value;
                    this.RaiseDataMemberChanged("TimeZoneString");
                    this.OnTimeZoneStringChanged();
                }
            }
        }
        
        private bool FilterCategory(Category entity)
        {
            return (entity.CategoryID == this.CategoryID);
        }
        
        private bool FilterSqlExceptionOccurrence(SqlExceptionOccurrence entity)
        {
            return (entity.ExceptionId == this.ExceptionId);
        }
        
        private void AttachSqlExceptionResources(SqlExceptionResource entity)
        {
            entity.SqlExceptionAppointment = this;
        }
        
        private void DetachSqlExceptionResources(SqlExceptionResource entity)
        {
            entity.SqlExceptionAppointment = null;
        }
        
        private bool FilterSqlExceptionResources(SqlExceptionResource entity)
        {
            return (entity.SqlExceptionAppointments_ExceptionId == this.ExceptionId);
        }
        
        private bool FilterTimeMarker(TimeMarker entity)
        {
            return (entity.TimeMarkersId == this.TimeMarkerID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._exceptionId;
        }
    }
    
    /// <summary>
    /// The 'SqlExceptionOccurrence' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ScheduleViewDB.Web")]
    public sealed partial class SqlExceptionOccurrence : Entity
    {
        
        private DateTime _exceptionDate;
        
        private int _exceptionId;
        
        private int _masterSqlAppointmentId;
        
        private EntityRef<SqlAppointment> _sqlAppointment;
        
        private EntityRef<SqlExceptionAppointment> _sqlExceptionAppointment;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnExceptionDateChanging(DateTime value);
        partial void OnExceptionDateChanged();
        partial void OnExceptionIdChanging(int value);
        partial void OnExceptionIdChanged();
        partial void OnMasterSqlAppointmentIdChanging(int value);
        partial void OnMasterSqlAppointmentIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SqlExceptionOccurrence"/> class.
        /// </summary>
        public SqlExceptionOccurrence()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ExceptionDate' value.
        /// </summary>
        [DataMember()]
        public DateTime ExceptionDate
        {
            get
            {
                return this._exceptionDate;
            }
            set
            {
                if ((this._exceptionDate != value))
                {
                    this.OnExceptionDateChanging(value);
                    this.RaiseDataMemberChanging("ExceptionDate");
                    this.ValidateProperty("ExceptionDate", value);
                    this._exceptionDate = value;
                    this.RaiseDataMemberChanged("ExceptionDate");
                    this.OnExceptionDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExceptionId' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ExceptionId
        {
            get
            {
                return this._exceptionId;
            }
            set
            {
                if ((this._exceptionId != value))
                {
                    this.OnExceptionIdChanging(value);
                    this.ValidateProperty("ExceptionId", value);
                    this._exceptionId = value;
                    this.RaisePropertyChanged("ExceptionId");
                    this.OnExceptionIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MasterSqlAppointmentId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int MasterSqlAppointmentId
        {
            get
            {
                return this._masterSqlAppointmentId;
            }
            set
            {
                if ((this._masterSqlAppointmentId != value))
                {
                    this.OnMasterSqlAppointmentIdChanging(value);
                    this.RaiseDataMemberChanging("MasterSqlAppointmentId");
                    this.ValidateProperty("MasterSqlAppointmentId", value);
                    this._masterSqlAppointmentId = value;
                    this.RaiseDataMemberChanged("MasterSqlAppointmentId");
                    this.OnMasterSqlAppointmentIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SqlAppointment"/> entity.
        /// </summary>
        [Association("SqlAppointment_SqlExceptionOccurrence", "MasterSqlAppointmentId", "SqlAppointmentId", IsForeignKey=true)]
        [XmlIgnore()]
        public SqlAppointment SqlAppointment
        {
            get
            {
                if ((this._sqlAppointment == null))
                {
                    this._sqlAppointment = new EntityRef<SqlAppointment>(this, "SqlAppointment", this.FilterSqlAppointment);
                }
                return this._sqlAppointment.Entity;
            }
            set
            {
                SqlAppointment previous = this.SqlAppointment;
                if ((previous != value))
                {
                    this.ValidateProperty("SqlAppointment", value);
                    if ((previous != null))
                    {
                        this._sqlAppointment.Entity = null;
                        previous.SqlExceptionOccurrences.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.MasterSqlAppointmentId = value.SqlAppointmentId;
                    }
                    else
                    {
                        this.MasterSqlAppointmentId = default(int);
                    }
                    this._sqlAppointment.Entity = value;
                    if ((value != null))
                    {
                        value.SqlExceptionOccurrences.Add(this);
                    }
                    this.RaisePropertyChanged("SqlAppointment");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SqlExceptionAppointment"/> entity.
        /// </summary>
        [Association("SqlExceptionOccurrence_SqlExceptionAppointment", "ExceptionId", "ExceptionId")]
        [XmlIgnore()]
        public SqlExceptionAppointment SqlExceptionAppointment
        {
            get
            {
                if ((this._sqlExceptionAppointment == null))
                {
                    this._sqlExceptionAppointment = new EntityRef<SqlExceptionAppointment>(this, "SqlExceptionAppointment", this.FilterSqlExceptionAppointment);
                }
                return this._sqlExceptionAppointment.Entity;
            }
            set
            {
                SqlExceptionAppointment previous = this.SqlExceptionAppointment;
                if ((previous != value))
                {
                    this.ValidateProperty("SqlExceptionAppointment", value);
                    if ((previous != null))
                    {
                        this._sqlExceptionAppointment.Entity = null;
                        previous.SqlExceptionOccurrence = null;
                    }
                    this._sqlExceptionAppointment.Entity = value;
                    if ((value != null))
                    {
                        value.SqlExceptionOccurrence = this;
                    }
                    this.RaisePropertyChanged("SqlExceptionAppointment");
                }
            }
        }
        
        private bool FilterSqlAppointment(SqlAppointment entity)
        {
            return (entity.SqlAppointmentId == this.MasterSqlAppointmentId);
        }
        
        private bool FilterSqlExceptionAppointment(SqlExceptionAppointment entity)
        {
            return (entity.ExceptionId == this.ExceptionId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._exceptionId;
        }
    }
    
    /// <summary>
    /// The 'SqlExceptionResource' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ScheduleViewDB.Web")]
    public sealed partial class SqlExceptionResource : Entity
    {
        
        private Nullable<bool> _manyToManyWorkaround;
        
        private EntityRef<SqlExceptionAppointment> _sqlExceptionAppointment;
        
        private int _sqlExceptionAppointments_ExceptionId;
        
        private EntityRef<SqlResource> _sqlResource;
        
        private int _sqlResources_SqlResourceId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnManyToManyWorkaroundChanging(Nullable<bool> value);
        partial void OnManyToManyWorkaroundChanged();
        partial void OnSqlExceptionAppointments_ExceptionIdChanging(int value);
        partial void OnSqlExceptionAppointments_ExceptionIdChanged();
        partial void OnSqlResources_SqlResourceIdChanging(int value);
        partial void OnSqlResources_SqlResourceIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SqlExceptionResource"/> class.
        /// </summary>
        public SqlExceptionResource()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ManyToManyWorkaround' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> ManyToManyWorkaround
        {
            get
            {
                return this._manyToManyWorkaround;
            }
            set
            {
                if ((this._manyToManyWorkaround != value))
                {
                    this.OnManyToManyWorkaroundChanging(value);
                    this.RaiseDataMemberChanging("ManyToManyWorkaround");
                    this.ValidateProperty("ManyToManyWorkaround", value);
                    this._manyToManyWorkaround = value;
                    this.RaiseDataMemberChanged("ManyToManyWorkaround");
                    this.OnManyToManyWorkaroundChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SqlExceptionAppointment"/> entity.
        /// </summary>
        [Association("SqlExceptionAppointment_SqlExceptionResource", "SqlExceptionAppointments_ExceptionId", "ExceptionId", IsForeignKey=true)]
        [XmlIgnore()]
        public SqlExceptionAppointment SqlExceptionAppointment
        {
            get
            {
                if ((this._sqlExceptionAppointment == null))
                {
                    this._sqlExceptionAppointment = new EntityRef<SqlExceptionAppointment>(this, "SqlExceptionAppointment", this.FilterSqlExceptionAppointment);
                }
                return this._sqlExceptionAppointment.Entity;
            }
            set
            {
                SqlExceptionAppointment previous = this.SqlExceptionAppointment;
                if ((previous != value))
                {
                    this.ValidateProperty("SqlExceptionAppointment", value);
                    if ((previous != null))
                    {
                        this._sqlExceptionAppointment.Entity = null;
                        previous.SqlExceptionResources.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SqlExceptionAppointments_ExceptionId = value.ExceptionId;
                    }
                    else
                    {
                        this.SqlExceptionAppointments_ExceptionId = default(int);
                    }
                    this._sqlExceptionAppointment.Entity = value;
                    if ((value != null))
                    {
                        value.SqlExceptionResources.Add(this);
                    }
                    this.RaisePropertyChanged("SqlExceptionAppointment");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SqlExceptionAppointments_ExceptionId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int SqlExceptionAppointments_ExceptionId
        {
            get
            {
                return this._sqlExceptionAppointments_ExceptionId;
            }
            set
            {
                if ((this._sqlExceptionAppointments_ExceptionId != value))
                {
                    this.OnSqlExceptionAppointments_ExceptionIdChanging(value);
                    this.RaiseDataMemberChanging("SqlExceptionAppointments_ExceptionId");
                    this.ValidateProperty("SqlExceptionAppointments_ExceptionId", value);
                    this._sqlExceptionAppointments_ExceptionId = value;
                    this.RaiseDataMemberChanged("SqlExceptionAppointments_ExceptionId");
                    this.OnSqlExceptionAppointments_ExceptionIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SqlResource"/> entity.
        /// </summary>
        [Association("SqlResource_SqlExceptionResource", "SqlResources_SqlResourceId", "SqlResourceId", IsForeignKey=true)]
        [XmlIgnore()]
        public SqlResource SqlResource
        {
            get
            {
                if ((this._sqlResource == null))
                {
                    this._sqlResource = new EntityRef<SqlResource>(this, "SqlResource", this.FilterSqlResource);
                }
                return this._sqlResource.Entity;
            }
            set
            {
                SqlResource previous = this.SqlResource;
                if ((previous != value))
                {
                    this.ValidateProperty("SqlResource", value);
                    if ((previous != null))
                    {
                        this._sqlResource.Entity = null;
                        previous.SqlExceptionResources.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SqlResources_SqlResourceId = value.SqlResourceId;
                    }
                    else
                    {
                        this.SqlResources_SqlResourceId = default(int);
                    }
                    this._sqlResource.Entity = value;
                    if ((value != null))
                    {
                        value.SqlExceptionResources.Add(this);
                    }
                    this.RaisePropertyChanged("SqlResource");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SqlResources_SqlResourceId' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int SqlResources_SqlResourceId
        {
            get
            {
                return this._sqlResources_SqlResourceId;
            }
            set
            {
                if ((this._sqlResources_SqlResourceId != value))
                {
                    this.OnSqlResources_SqlResourceIdChanging(value);
                    this.RaiseDataMemberChanging("SqlResources_SqlResourceId");
                    this.ValidateProperty("SqlResources_SqlResourceId", value);
                    this._sqlResources_SqlResourceId = value;
                    this.RaiseDataMemberChanged("SqlResources_SqlResourceId");
                    this.OnSqlResources_SqlResourceIdChanged();
                }
            }
        }
        
        private bool FilterSqlExceptionAppointment(SqlExceptionAppointment entity)
        {
            return (entity.ExceptionId == this.SqlExceptionAppointments_ExceptionId);
        }
        
        private bool FilterSqlResource(SqlResource entity)
        {
            return (entity.SqlResourceId == this.SqlResources_SqlResourceId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._sqlExceptionAppointments_ExceptionId, this._sqlResources_SqlResourceId);
        }
    }
    
    /// <summary>
    /// The 'SqlResource' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ScheduleViewDB.Web")]
    public sealed partial class SqlResource : Entity
    {
        
        private string _displayName;
        
        private string _resourceName;
        
        private EntityCollection<SqlAppointmentResource> _sqlAppointmentResources;
        
        private EntityCollection<SqlExceptionResource> _sqlExceptionResources;
        
        private int _sqlResourceId;
        
        private EntityRef<SqlResourceType> _sqlResourceType;
        
        private Nullable<int> _sqlResourceTypeId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDisplayNameChanging(string value);
        partial void OnDisplayNameChanged();
        partial void OnResourceNameChanging(string value);
        partial void OnResourceNameChanged();
        partial void OnSqlResourceIdChanging(int value);
        partial void OnSqlResourceIdChanged();
        partial void OnSqlResourceTypeIdChanging(Nullable<int> value);
        partial void OnSqlResourceTypeIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SqlResource"/> class.
        /// </summary>
        public SqlResource()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DisplayName' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string DisplayName
        {
            get
            {
                return this._displayName;
            }
            set
            {
                if ((this._displayName != value))
                {
                    this.OnDisplayNameChanging(value);
                    this.RaiseDataMemberChanging("DisplayName");
                    this.ValidateProperty("DisplayName", value);
                    this._displayName = value;
                    this.RaiseDataMemberChanged("DisplayName");
                    this.OnDisplayNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ResourceName' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string ResourceName
        {
            get
            {
                return this._resourceName;
            }
            set
            {
                if ((this._resourceName != value))
                {
                    this.OnResourceNameChanging(value);
                    this.RaiseDataMemberChanging("ResourceName");
                    this.ValidateProperty("ResourceName", value);
                    this._resourceName = value;
                    this.RaiseDataMemberChanged("ResourceName");
                    this.OnResourceNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SqlAppointmentResource"/> entity instances.
        /// </summary>
        [Association("SqlResource_SqlAppointmentResource", "SqlResourceId", "SqlResources_SqlResourceId")]
        [XmlIgnore()]
        public EntityCollection<SqlAppointmentResource> SqlAppointmentResources
        {
            get
            {
                if ((this._sqlAppointmentResources == null))
                {
                    this._sqlAppointmentResources = new EntityCollection<SqlAppointmentResource>(this, "SqlAppointmentResources", this.FilterSqlAppointmentResources, this.AttachSqlAppointmentResources, this.DetachSqlAppointmentResources);
                }
                return this._sqlAppointmentResources;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SqlExceptionResource"/> entity instances.
        /// </summary>
        [Association("SqlResource_SqlExceptionResource", "SqlResourceId", "SqlResources_SqlResourceId")]
        [XmlIgnore()]
        public EntityCollection<SqlExceptionResource> SqlExceptionResources
        {
            get
            {
                if ((this._sqlExceptionResources == null))
                {
                    this._sqlExceptionResources = new EntityCollection<SqlExceptionResource>(this, "SqlExceptionResources", this.FilterSqlExceptionResources, this.AttachSqlExceptionResources, this.DetachSqlExceptionResources);
                }
                return this._sqlExceptionResources;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SqlResourceId' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int SqlResourceId
        {
            get
            {
                return this._sqlResourceId;
            }
            set
            {
                if ((this._sqlResourceId != value))
                {
                    this.OnSqlResourceIdChanging(value);
                    this.ValidateProperty("SqlResourceId", value);
                    this._sqlResourceId = value;
                    this.RaisePropertyChanged("SqlResourceId");
                    this.OnSqlResourceIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SqlResourceType"/> entity.
        /// </summary>
        [Association("SqlResourceType_SqlResource", "SqlResourceTypeId", "SqlResourceTypeId", IsForeignKey=true)]
        [XmlIgnore()]
        public SqlResourceType SqlResourceType
        {
            get
            {
                if ((this._sqlResourceType == null))
                {
                    this._sqlResourceType = new EntityRef<SqlResourceType>(this, "SqlResourceType", this.FilterSqlResourceType);
                }
                return this._sqlResourceType.Entity;
            }
            set
            {
                SqlResourceType previous = this.SqlResourceType;
                if ((previous != value))
                {
                    this.ValidateProperty("SqlResourceType", value);
                    if ((previous != null))
                    {
                        this._sqlResourceType.Entity = null;
                        previous.SqlResources.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SqlResourceTypeId = value.SqlResourceTypeId;
                    }
                    else
                    {
                        this.SqlResourceTypeId = default(Nullable<int>);
                    }
                    this._sqlResourceType.Entity = value;
                    if ((value != null))
                    {
                        value.SqlResources.Add(this);
                    }
                    this.RaisePropertyChanged("SqlResourceType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SqlResourceTypeId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<int> SqlResourceTypeId
        {
            get
            {
                return this._sqlResourceTypeId;
            }
            set
            {
                if ((this._sqlResourceTypeId != value))
                {
                    this.OnSqlResourceTypeIdChanging(value);
                    this.RaiseDataMemberChanging("SqlResourceTypeId");
                    this.ValidateProperty("SqlResourceTypeId", value);
                    this._sqlResourceTypeId = value;
                    this.RaiseDataMemberChanged("SqlResourceTypeId");
                    this.OnSqlResourceTypeIdChanged();
                }
            }
        }
        
        private void AttachSqlAppointmentResources(SqlAppointmentResource entity)
        {
            entity.SqlResource = this;
        }
        
        private void DetachSqlAppointmentResources(SqlAppointmentResource entity)
        {
            entity.SqlResource = null;
        }
        
        private bool FilterSqlAppointmentResources(SqlAppointmentResource entity)
        {
            return (entity.SqlResources_SqlResourceId == this.SqlResourceId);
        }
        
        private void AttachSqlExceptionResources(SqlExceptionResource entity)
        {
            entity.SqlResource = this;
        }
        
        private void DetachSqlExceptionResources(SqlExceptionResource entity)
        {
            entity.SqlResource = null;
        }
        
        private bool FilterSqlExceptionResources(SqlExceptionResource entity)
        {
            return (entity.SqlResources_SqlResourceId == this.SqlResourceId);
        }
        
        private bool FilterSqlResourceType(SqlResourceType entity)
        {
            return (entity.SqlResourceTypeId == this.SqlResourceTypeId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._sqlResourceId;
        }
    }
    
    /// <summary>
    /// The 'SqlResourceType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ScheduleViewDB.Web")]
    public sealed partial class SqlResourceType : Entity
    {
        
        private bool _allowMultipleSelection;
        
        private string _displayName;
        
        private string _name;
        
        private EntityCollection<SqlResource> _sqlResources;
        
        private int _sqlResourceTypeId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAllowMultipleSelectionChanging(bool value);
        partial void OnAllowMultipleSelectionChanged();
        partial void OnDisplayNameChanging(string value);
        partial void OnDisplayNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnSqlResourceTypeIdChanging(int value);
        partial void OnSqlResourceTypeIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SqlResourceType"/> class.
        /// </summary>
        public SqlResourceType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AllowMultipleSelection' value.
        /// </summary>
        [DataMember()]
        public bool AllowMultipleSelection
        {
            get
            {
                return this._allowMultipleSelection;
            }
            set
            {
                if ((this._allowMultipleSelection != value))
                {
                    this.OnAllowMultipleSelectionChanging(value);
                    this.RaiseDataMemberChanging("AllowMultipleSelection");
                    this.ValidateProperty("AllowMultipleSelection", value);
                    this._allowMultipleSelection = value;
                    this.RaiseDataMemberChanged("AllowMultipleSelection");
                    this.OnAllowMultipleSelectionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DisplayName' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string DisplayName
        {
            get
            {
                return this._displayName;
            }
            set
            {
                if ((this._displayName != value))
                {
                    this.OnDisplayNameChanging(value);
                    this.RaiseDataMemberChanging("DisplayName");
                    this.ValidateProperty("DisplayName", value);
                    this._displayName = value;
                    this.RaiseDataMemberChanged("DisplayName");
                    this.OnDisplayNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SqlResource"/> entity instances.
        /// </summary>
        [Association("SqlResourceType_SqlResource", "SqlResourceTypeId", "SqlResourceTypeId")]
        [XmlIgnore()]
        public EntityCollection<SqlResource> SqlResources
        {
            get
            {
                if ((this._sqlResources == null))
                {
                    this._sqlResources = new EntityCollection<SqlResource>(this, "SqlResources", this.FilterSqlResources, this.AttachSqlResources, this.DetachSqlResources);
                }
                return this._sqlResources;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SqlResourceTypeId' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int SqlResourceTypeId
        {
            get
            {
                return this._sqlResourceTypeId;
            }
            set
            {
                if ((this._sqlResourceTypeId != value))
                {
                    this.OnSqlResourceTypeIdChanging(value);
                    this.ValidateProperty("SqlResourceTypeId", value);
                    this._sqlResourceTypeId = value;
                    this.RaisePropertyChanged("SqlResourceTypeId");
                    this.OnSqlResourceTypeIdChanged();
                }
            }
        }
        
        private void AttachSqlResources(SqlResource entity)
        {
            entity.SqlResourceType = this;
        }
        
        private void DetachSqlResources(SqlResource entity)
        {
            entity.SqlResourceType = null;
        }
        
        private bool FilterSqlResources(SqlResource entity)
        {
            return (entity.SqlResourceTypeId == this.SqlResourceTypeId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._sqlResourceTypeId;
        }
    }
    
    /// <summary>
    /// The 'TimeMarker' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ScheduleViewDB.Web")]
    public sealed partial class TimeMarker : Entity
    {
        
        private EntityCollection<SqlAppointment> _sqlAppointments;
        
        private EntityCollection<SqlExceptionAppointment> _sqlExceptionAppointments;
        
        private string _timeMarkerBrushName;
        
        private string _timeMarkerName;
        
        private int _timeMarkersId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnTimeMarkerBrushNameChanging(string value);
        partial void OnTimeMarkerBrushNameChanged();
        partial void OnTimeMarkerNameChanging(string value);
        partial void OnTimeMarkerNameChanged();
        partial void OnTimeMarkersIdChanging(int value);
        partial void OnTimeMarkersIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeMarker"/> class.
        /// </summary>
        public TimeMarker()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SqlAppointment"/> entity instances.
        /// </summary>
        [Association("TimeMarker_SqlAppointment", "TimeMarkersId", "TimeMarkerID")]
        [XmlIgnore()]
        public EntityCollection<SqlAppointment> SqlAppointments
        {
            get
            {
                if ((this._sqlAppointments == null))
                {
                    this._sqlAppointments = new EntityCollection<SqlAppointment>(this, "SqlAppointments", this.FilterSqlAppointments, this.AttachSqlAppointments, this.DetachSqlAppointments);
                }
                return this._sqlAppointments;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SqlExceptionAppointment"/> entity instances.
        /// </summary>
        [Association("TimeMarker_SqlExceptionAppointment", "TimeMarkersId", "TimeMarkerID")]
        [XmlIgnore()]
        public EntityCollection<SqlExceptionAppointment> SqlExceptionAppointments
        {
            get
            {
                if ((this._sqlExceptionAppointments == null))
                {
                    this._sqlExceptionAppointments = new EntityCollection<SqlExceptionAppointment>(this, "SqlExceptionAppointments", this.FilterSqlExceptionAppointments, this.AttachSqlExceptionAppointments, this.DetachSqlExceptionAppointments);
                }
                return this._sqlExceptionAppointments;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TimeMarkerBrushName' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string TimeMarkerBrushName
        {
            get
            {
                return this._timeMarkerBrushName;
            }
            set
            {
                if ((this._timeMarkerBrushName != value))
                {
                    this.OnTimeMarkerBrushNameChanging(value);
                    this.RaiseDataMemberChanging("TimeMarkerBrushName");
                    this.ValidateProperty("TimeMarkerBrushName", value);
                    this._timeMarkerBrushName = value;
                    this.RaiseDataMemberChanged("TimeMarkerBrushName");
                    this.OnTimeMarkerBrushNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TimeMarkerName' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string TimeMarkerName
        {
            get
            {
                return this._timeMarkerName;
            }
            set
            {
                if ((this._timeMarkerName != value))
                {
                    this.OnTimeMarkerNameChanging(value);
                    this.RaiseDataMemberChanging("TimeMarkerName");
                    this.ValidateProperty("TimeMarkerName", value);
                    this._timeMarkerName = value;
                    this.RaiseDataMemberChanged("TimeMarkerName");
                    this.OnTimeMarkerNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TimeMarkersId' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int TimeMarkersId
        {
            get
            {
                return this._timeMarkersId;
            }
            set
            {
                if ((this._timeMarkersId != value))
                {
                    this.OnTimeMarkersIdChanging(value);
                    this.ValidateProperty("TimeMarkersId", value);
                    this._timeMarkersId = value;
                    this.RaisePropertyChanged("TimeMarkersId");
                    this.OnTimeMarkersIdChanged();
                }
            }
        }
        
        private void AttachSqlAppointments(SqlAppointment entity)
        {
            entity.TimeMarker = this;
        }
        
        private void DetachSqlAppointments(SqlAppointment entity)
        {
            entity.TimeMarker = null;
        }
        
        private bool FilterSqlAppointments(SqlAppointment entity)
        {
            return (entity.TimeMarkerID == this.TimeMarkersId);
        }
        
        private void AttachSqlExceptionAppointments(SqlExceptionAppointment entity)
        {
            entity.TimeMarker = this;
        }
        
        private void DetachSqlExceptionAppointments(SqlExceptionAppointment entity)
        {
            entity.TimeMarker = null;
        }
        
        private bool FilterSqlExceptionAppointments(SqlExceptionAppointment entity)
        {
            return (entity.TimeMarkerID == this.TimeMarkersId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._timeMarkersId;
        }
    }
}
